.TH wxTextCtrl 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxTextCtrl \- See external documentation: wxTextCtrl.
.SH DESCRIPTION
.LP
See external documentation: wxTextCtrl\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxControl\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxTextCtrl()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxTextCtrl()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow), Id::integer()) -> wxTextCtrl()
.br
.RS
.LP
Equivalent to \fBnew(Parent, Id, [])\fR\&\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow), Id::integer(), Options::[Option]) -> wxTextCtrl()
.br
.RS
.TP 3
Types:

Option = {value, string()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx() (see module wx)}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
appendText(This::wxTextCtrl(), Text::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canCopy(This::wxTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canCut(This::wxTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canPaste(This::wxTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canRedo(This::wxTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canUndo(This::wxTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clear(This::wxTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
copy(This::wxTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This::wxTextCtrl(), Parent::wxWindow() (see module wxWindow), Id::integer()) -> bool()
.br
.RS
.LP
Equivalent to \fBcreate(This, Parent, Id, [])\fR\&\&.
.RE
.LP
.B
create(This::wxTextCtrl(), Parent::wxWindow() (see module wxWindow), Id::integer(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {value, string()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx() (see module wx)}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cut(This::wxTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
discardEdits(This::wxTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
emulateKeyPress(This::wxTextCtrl(), Event::wxKeyEvent() (see module wxKeyEvent)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultStyle(This::wxTextCtrl()) -> wxTextAttr() (see module wxTextAttr)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getInsertionPoint(This::wxTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLastPosition(This::wxTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineLength(This::wxTextCtrl(), LineNo::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineText(This::wxTextCtrl(), LineNo::integer()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getNumberOfLines(This::wxTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRange(This::wxTextCtrl(), From::integer(), To::integer()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelection(This::wxTextCtrl()) -> {From::integer(), To::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStringSelection(This::wxTextCtrl()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStyle(This::wxTextCtrl(), Position::integer(), Style::wxTextAttr() (see module wxTextAttr)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getValue(This::wxTextCtrl()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isEditable(This::wxTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isModified(This::wxTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isMultiLine(This::wxTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isSingleLine(This::wxTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadFile(This::wxTextCtrl(), File::string()) -> bool()
.br
.RS
.LP
Equivalent to \fBloadFile(This, File, [])\fR\&\&.
.RE
.LP
.B
loadFile(This::wxTextCtrl(), File::string(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {fileType, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markDirty(This::wxTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
paste(This::wxTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
positionToXY(This::wxTextCtrl(), Pos::integer()) -> {bool(), X::integer(), Y::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
redo(This::wxTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
remove(This::wxTextCtrl(), From::integer(), To::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
replace(This::wxTextCtrl(), From::integer(), To::integer(), Value::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
saveFile(This::wxTextCtrl()) -> bool()
.br
.RS
.LP
Equivalent to \fBsaveFile(This, [])\fR\&\&.
.RE
.LP
.B
saveFile(This::wxTextCtrl(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {file, string()} | {fileType, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDefaultStyle(This::wxTextCtrl(), Style::wxTextAttr() (see module wxTextAttr)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setEditable(This::wxTextCtrl(), Editable::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setInsertionPoint(This::wxTextCtrl(), Pos::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setInsertionPointEnd(This::wxTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMaxLength(This::wxTextCtrl(), Len::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelection(This::wxTextCtrl(), From::integer(), To::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStyle(This::wxTextCtrl(), Start::integer(), End::integer(), Style::wxTextAttr() (see module wxTextAttr)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setValue(This::wxTextCtrl(), Value::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
showPosition(This::wxTextCtrl(), Pos::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
undo(This::wxTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
writeText(This::wxTextCtrl(), Text::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
xYToPosition(This::wxTextCtrl(), X::integer(), Y::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxTextCtrl()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>