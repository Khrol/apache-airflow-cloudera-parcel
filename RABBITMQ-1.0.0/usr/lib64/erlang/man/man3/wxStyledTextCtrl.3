.TH wxStyledTextCtrl 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxStyledTextCtrl \- See external documentation: wxStyledTextCtrl.
.SH DESCRIPTION
.LP
See external documentation: wxStyledTextCtrl\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxControl\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxStyledTextCtrl()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxStyledTextCtrl()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow)) -> wxStyledTextCtrl()
.br
.RS
.LP
Equivalent to \fBnew(Parent, [])\fR\&\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow), Options::[Option]) -> wxStyledTextCtrl()
.br
.RS
.TP 3
Types:

Option = {id, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This::wxStyledTextCtrl(), Parent::wxWindow() (see module wxWindow)) -> bool()
.br
.RS
.LP
Equivalent to \fBcreate(This, Parent, [])\fR\&\&.
.RE
.LP
.B
create(This::wxStyledTextCtrl(), Parent::wxWindow() (see module wxWindow), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {id, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addText(This::wxStyledTextCtrl(), Text::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addStyledText(This::wxStyledTextCtrl(), Data::wxMemoryBuffer() (see module wxMemoryBuffer)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertText(This::wxStyledTextCtrl(), Pos::integer(), Text::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clearAll(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clearDocumentStyle(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLength(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCharAt(This::wxStyledTextCtrl(), Pos::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCurrentPos(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getAnchor(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStyleAt(This::wxStyledTextCtrl(), Pos::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
redo(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setUndoCollection(This::wxStyledTextCtrl(), CollectUndo::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
selectAll(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSavePoint(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStyledText(This::wxStyledTextCtrl(), StartPos::integer(), EndPos::integer()) -> wxMemoryBuffer() (see module wxMemoryBuffer)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canRedo(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerLineFromHandle(This::wxStyledTextCtrl(), Handle::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerDeleteHandle(This::wxStyledTextCtrl(), Handle::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getUndoCollection(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getViewWhiteSpace(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setViewWhiteSpace(This::wxStyledTextCtrl(), ViewWS::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
positionFromPoint(This::wxStyledTextCtrl(), Pt::{X::integer(), Y::integer()}) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
positionFromPointClose(This::wxStyledTextCtrl(), X::integer(), Y::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
gotoLine(This::wxStyledTextCtrl(), Line::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
gotoPos(This::wxStyledTextCtrl(), Pos::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setAnchor(This::wxStyledTextCtrl(), PosAnchor::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCurLine(This::wxStyledTextCtrl()) -> {string(), LinePos::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEndStyled(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
convertEOLs(This::wxStyledTextCtrl(), EolMode::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEOLMode(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setEOLMode(This::wxStyledTextCtrl(), EolMode::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
startStyling(This::wxStyledTextCtrl(), Pos::integer(), Mask::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStyling(This::wxStyledTextCtrl(), Length::integer(), Style::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getBufferedDraw(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setBufferedDraw(This::wxStyledTextCtrl(), Buffered::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTabWidth(This::wxStyledTextCtrl(), TabWidth::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTabWidth(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCodePage(This::wxStyledTextCtrl(), CodePage::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerDefine(This::wxStyledTextCtrl(), MarkerNumber::integer(), MarkerSymbol::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBmarkerDefine(This, MarkerNumber, MarkerSymbol, [])\fR\&\&.
.RE
.LP
.B
markerDefine(This::wxStyledTextCtrl(), MarkerNumber::integer(), MarkerSymbol::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {foreground, colour() (see module wx)} | {background, colour() (see module wx)}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerSetForeground(This::wxStyledTextCtrl(), MarkerNumber::integer(), Fore::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerSetBackground(This::wxStyledTextCtrl(), MarkerNumber::integer(), Back::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerAdd(This::wxStyledTextCtrl(), Line::integer(), MarkerNumber::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerDelete(This::wxStyledTextCtrl(), Line::integer(), MarkerNumber::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerDeleteAll(This::wxStyledTextCtrl(), MarkerNumber::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerGet(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerNext(This::wxStyledTextCtrl(), LineStart::integer(), MarkerMask::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerPrevious(This::wxStyledTextCtrl(), LineStart::integer(), MarkerMask::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerDefineBitmap(This::wxStyledTextCtrl(), MarkerNumber::integer(), Bmp::wxBitmap() (see module wxBitmap)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerAddSet(This::wxStyledTextCtrl(), Line::integer(), Set::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
markerSetAlpha(This::wxStyledTextCtrl(), MarkerNumber::integer(), Alpha::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMarginType(This::wxStyledTextCtrl(), Margin::integer(), MarginType::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMarginType(This::wxStyledTextCtrl(), Margin::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMarginWidth(This::wxStyledTextCtrl(), Margin::integer(), PixelWidth::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMarginWidth(This::wxStyledTextCtrl(), Margin::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMarginMask(This::wxStyledTextCtrl(), Margin::integer(), Mask::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMarginMask(This::wxStyledTextCtrl(), Margin::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMarginSensitive(This::wxStyledTextCtrl(), Margin::integer(), Sensitive::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMarginSensitive(This::wxStyledTextCtrl(), Margin::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleClearAll(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetForeground(This::wxStyledTextCtrl(), Style::integer(), Fore::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetBackground(This::wxStyledTextCtrl(), Style::integer(), Back::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetBold(This::wxStyledTextCtrl(), Style::integer(), Bold::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetItalic(This::wxStyledTextCtrl(), Style::integer(), Italic::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetSize(This::wxStyledTextCtrl(), Style::integer(), SizePoints::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetFaceName(This::wxStyledTextCtrl(), Style::integer(), FontName::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetEOLFilled(This::wxStyledTextCtrl(), Style::integer(), Filled::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleResetDefault(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetUnderline(This::wxStyledTextCtrl(), Style::integer(), Underline::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetCase(This::wxStyledTextCtrl(), Style::integer(), CaseForce::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetHotSpot(This::wxStyledTextCtrl(), Style::integer(), Hotspot::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelForeground(This::wxStyledTextCtrl(), UseSetting::bool(), Fore::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelBackground(This::wxStyledTextCtrl(), UseSetting::bool(), Back::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelAlpha(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelAlpha(This::wxStyledTextCtrl(), Alpha::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCaretForeground(This::wxStyledTextCtrl(), Fore::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cmdKeyAssign(This::wxStyledTextCtrl(), Key::integer(), Modifiers::integer(), Cmd::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cmdKeyClear(This::wxStyledTextCtrl(), Key::integer(), Modifiers::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cmdKeyClearAll(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStyleBytes(This::wxStyledTextCtrl(), Length::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetVisible(This::wxStyledTextCtrl(), Style::integer(), Visible::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCaretPeriod(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCaretPeriod(This::wxStyledTextCtrl(), PeriodMilliseconds::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWordChars(This::wxStyledTextCtrl(), Characters::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
beginUndoAction(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
endUndoAction(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
indicatorSetStyle(This::wxStyledTextCtrl(), Indic::integer(), Style::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
indicatorGetStyle(This::wxStyledTextCtrl(), Indic::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
indicatorSetForeground(This::wxStyledTextCtrl(), Indic::integer(), Fore::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
indicatorGetForeground(This::wxStyledTextCtrl(), Indic::integer()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWhitespaceForeground(This::wxStyledTextCtrl(), UseSetting::bool(), Fore::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWhitespaceBackground(This::wxStyledTextCtrl(), UseSetting::bool(), Back::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStyleBits(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLineState(This::wxStyledTextCtrl(), Line::integer(), State::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineState(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMaxLineState(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCaretLineVisible(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCaretLineVisible(This::wxStyledTextCtrl(), Show::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCaretLineBackground(This::wxStyledTextCtrl()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCaretLineBackground(This::wxStyledTextCtrl(), Back::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompShow(This::wxStyledTextCtrl(), LenEntered::integer(), ItemList::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompCancel(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompActive(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompPosStart(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompComplete(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompStops(This::wxStyledTextCtrl(), CharacterSet::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSetSeparator(This::wxStyledTextCtrl(), SeparatorCharacter::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompGetSeparator(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSelect(This::wxStyledTextCtrl(), Text::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSetCancelAtStart(This::wxStyledTextCtrl(), Cancel::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompGetCancelAtStart(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSetFillUps(This::wxStyledTextCtrl(), CharacterSet::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSetChooseSingle(This::wxStyledTextCtrl(), ChooseSingle::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompGetChooseSingle(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSetIgnoreCase(This::wxStyledTextCtrl(), IgnoreCase::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompGetIgnoreCase(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
userListShow(This::wxStyledTextCtrl(), ListType::integer(), ItemList::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSetAutoHide(This::wxStyledTextCtrl(), AutoHide::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompGetAutoHide(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSetDropRestOfWord(This::wxStyledTextCtrl(), DropRestOfWord::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompGetDropRestOfWord(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
registerImage(This::wxStyledTextCtrl(), Type::integer(), Bmp::wxBitmap() (see module wxBitmap)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clearRegisteredImages(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompGetTypeSeparator(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSetTypeSeparator(This::wxStyledTextCtrl(), SeparatorCharacter::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSetMaxWidth(This::wxStyledTextCtrl(), CharacterCount::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompGetMaxWidth(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompSetMaxHeight(This::wxStyledTextCtrl(), RowCount::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompGetMaxHeight(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setIndent(This::wxStyledTextCtrl(), IndentSize::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getIndent(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setUseTabs(This::wxStyledTextCtrl(), UseTabs::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getUseTabs(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLineIndentation(This::wxStyledTextCtrl(), Line::integer(), IndentSize::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineIndentation(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineIndentPosition(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getColumn(This::wxStyledTextCtrl(), Pos::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setUseHorizontalScrollBar(This::wxStyledTextCtrl(), Show::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getUseHorizontalScrollBar(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setIndentationGuides(This::wxStyledTextCtrl(), Show::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getIndentationGuides(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setHighlightGuide(This::wxStyledTextCtrl(), Column::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getHighlightGuide(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineEndPosition(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCodePage(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCaretForeground(This::wxStyledTextCtrl()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getReadOnly(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCurrentPos(This::wxStyledTextCtrl(), Pos::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelectionStart(This::wxStyledTextCtrl(), Pos::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectionStart(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelectionEnd(This::wxStyledTextCtrl(), Pos::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectionEnd(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setPrintMagnification(This::wxStyledTextCtrl(), Magnification::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPrintMagnification(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setPrintColourMode(This::wxStyledTextCtrl(), Mode::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPrintColourMode(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findText(This::wxStyledTextCtrl(), MinPos::integer(), MaxPos::integer(), Text::string()) -> integer()
.br
.RS
.LP
Equivalent to \fBfindText(This, MinPos, MaxPos, Text, [])\fR\&\&.
.RE
.LP
.B
findText(This::wxStyledTextCtrl(), MinPos::integer(), MaxPos::integer(), Text::string(), Options::[Option]) -> integer()
.br
.RS
.TP 3
Types:

Option = {flags, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
formatRange(This::wxStyledTextCtrl(), DoDraw::bool(), StartPos::integer(), EndPos::integer(), Draw::wxDC() (see module wxDC), Target::wxDC() (see module wxDC), RenderRect::{X::integer(), Y::integer(), W::integer(), H::integer()}, PageRect::{X::integer(), Y::integer(), W::integer(), H::integer()}) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFirstVisibleLine(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLine(This::wxStyledTextCtrl(), Line::integer()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineCount(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMarginLeft(This::wxStyledTextCtrl(), PixelWidth::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMarginLeft(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMarginRight(This::wxStyledTextCtrl(), PixelWidth::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMarginRight(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getModify(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelection(This::wxStyledTextCtrl(), Start::integer(), End::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectedText(This::wxStyledTextCtrl()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTextRange(This::wxStyledTextCtrl(), StartPos::integer(), EndPos::integer()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hideSelection(This::wxStyledTextCtrl(), Normal::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineFromPosition(This::wxStyledTextCtrl(), Pos::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
positionFromLine(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineScroll(This::wxStyledTextCtrl(), Columns::integer(), Lines::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
ensureCaretVisible(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
replaceSelection(This::wxStyledTextCtrl(), Text::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setReadOnly(This::wxStyledTextCtrl(), ReadOnly::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canPaste(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canUndo(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
emptyUndoBuffer(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
undo(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cut(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
copy(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
paste(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clear(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setText(This::wxStyledTextCtrl(), Text::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getText(This::wxStyledTextCtrl()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTextLength(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getOvertype(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCaretWidth(This::wxStyledTextCtrl(), PixelWidth::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCaretWidth(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTargetStart(This::wxStyledTextCtrl(), Pos::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTargetStart(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTargetEnd(This::wxStyledTextCtrl(), Pos::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTargetEnd(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
replaceTarget(This::wxStyledTextCtrl(), Text::string()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
searchInTarget(This::wxStyledTextCtrl(), Text::string()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSearchFlags(This::wxStyledTextCtrl(), Flags::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSearchFlags(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
callTipShow(This::wxStyledTextCtrl(), Pos::integer(), Definition::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
callTipCancel(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
callTipActive(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
callTipPosAtStart(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
callTipSetHighlight(This::wxStyledTextCtrl(), Start::integer(), End::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
callTipSetBackground(This::wxStyledTextCtrl(), Back::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
callTipSetForeground(This::wxStyledTextCtrl(), Fore::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
callTipSetForegroundHighlight(This::wxStyledTextCtrl(), Fore::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
callTipUseStyle(This::wxStyledTextCtrl(), TabSize::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
visibleFromDocLine(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
docLineFromVisible(This::wxStyledTextCtrl(), LineDisplay::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wrapCount(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFoldLevel(This::wxStyledTextCtrl(), Line::integer(), Level::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFoldLevel(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLastChild(This::wxStyledTextCtrl(), Line::integer(), Level::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFoldParent(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
showLines(This::wxStyledTextCtrl(), LineStart::integer(), LineEnd::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hideLines(This::wxStyledTextCtrl(), LineStart::integer(), LineEnd::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineVisible(This::wxStyledTextCtrl(), Line::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFoldExpanded(This::wxStyledTextCtrl(), Line::integer(), Expanded::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFoldExpanded(This::wxStyledTextCtrl(), Line::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
toggleFold(This::wxStyledTextCtrl(), Line::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
ensureVisible(This::wxStyledTextCtrl(), Line::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFoldFlags(This::wxStyledTextCtrl(), Flags::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
ensureVisibleEnforcePolicy(This::wxStyledTextCtrl(), Line::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTabIndents(This::wxStyledTextCtrl(), TabIndents::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTabIndents(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setBackSpaceUnIndents(This::wxStyledTextCtrl(), BsUnIndents::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getBackSpaceUnIndents(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMouseDwellTime(This::wxStyledTextCtrl(), PeriodMilliseconds::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMouseDwellTime(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordStartPosition(This::wxStyledTextCtrl(), Pos::integer(), OnlyWordCharacters::bool()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordEndPosition(This::wxStyledTextCtrl(), Pos::integer(), OnlyWordCharacters::bool()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWrapMode(This::wxStyledTextCtrl(), Mode::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWrapMode(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWrapVisualFlags(This::wxStyledTextCtrl(), WrapVisualFlags::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWrapVisualFlags(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWrapVisualFlagsLocation(This::wxStyledTextCtrl(), WrapVisualFlagsLocation::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWrapVisualFlagsLocation(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWrapStartIndent(This::wxStyledTextCtrl(), Indent::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWrapStartIndent(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLayoutCache(This::wxStyledTextCtrl(), Mode::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLayoutCache(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setScrollWidth(This::wxStyledTextCtrl(), PixelWidth::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getScrollWidth(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
textWidth(This::wxStyledTextCtrl(), Style::integer(), Text::string()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEndAtLastLine(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
textHeight(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setUseVerticalScrollBar(This::wxStyledTextCtrl(), Show::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getUseVerticalScrollBar(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
appendText(This::wxStyledTextCtrl(), Text::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTwoPhaseDraw(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTwoPhaseDraw(This::wxStyledTextCtrl(), TwoPhase::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
targetFromSelection(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
linesJoin(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
linesSplit(This::wxStyledTextCtrl(), PixelWidth::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFoldMarginColour(This::wxStyledTextCtrl(), UseSetting::bool(), Back::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFoldMarginHiColour(This::wxStyledTextCtrl(), UseSetting::bool(), Fore::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineDown(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineDownExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineUp(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineUpExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
charLeft(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
charLeftExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
charRight(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
charRightExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordLeft(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordLeftExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordRight(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordRightExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
home(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
homeExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineEnd(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineEndExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
documentStart(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
documentStartExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
documentEnd(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
documentEndExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pageUp(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pageUpExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pageDown(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pageDownExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
editToggleOvertype(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cancel(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteBack(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
tab(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
backTab(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
newLine(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
formFeed(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
vCHome(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
vCHomeExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
zoomIn(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
zoomOut(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
delWordLeft(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
delWordRight(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineCut(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineDelete(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineTranspose(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineDuplicate(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lowerCase(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
upperCase(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineScrollDown(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineScrollUp(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteBackNotLine(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
homeDisplay(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
homeDisplayExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineEndDisplay(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineEndDisplayExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
homeWrapExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineEndWrap(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineEndWrapExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
vCHomeWrap(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
vCHomeWrapExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineCopy(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveCaretInsideView(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineLength(This::wxStyledTextCtrl(), Line::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
braceHighlight(This::wxStyledTextCtrl(), Pos1::integer(), Pos2::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
braceBadLight(This::wxStyledTextCtrl(), Pos::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
braceMatch(This::wxStyledTextCtrl(), Pos::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getViewEOL(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setViewEOL(This::wxStyledTextCtrl(), Visible::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setModEventMask(This::wxStyledTextCtrl(), Mask::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEdgeColumn(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setEdgeColumn(This::wxStyledTextCtrl(), Column::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEdgeMode(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEdgeColour(This::wxStyledTextCtrl()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setEdgeColour(This::wxStyledTextCtrl(), EdgeColour::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
searchAnchor(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
searchNext(This::wxStyledTextCtrl(), Flags::integer(), Text::string()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
searchPrev(This::wxStyledTextCtrl(), Flags::integer(), Text::string()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
linesOnScreen(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
usePopUp(This::wxStyledTextCtrl(), AllowPopUp::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
selectionIsRectangle(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setZoom(This::wxStyledTextCtrl(), Zoom::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getZoom(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getModEventMask(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSTCFocus(This::wxStyledTextCtrl(), Focus::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSTCFocus(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatus(This::wxStyledTextCtrl(), StatusCode::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStatus(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMouseDownCaptures(This::wxStyledTextCtrl(), Captures::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMouseDownCaptures(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSTCCursor(This::wxStyledTextCtrl(), CursorType::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSTCCursor(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setControlCharSymbol(This::wxStyledTextCtrl(), Symbol::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getControlCharSymbol(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordPartLeft(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordPartLeftExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordPartRight(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordPartRightExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setVisiblePolicy(This::wxStyledTextCtrl(), VisiblePolicy::integer(), VisibleSlop::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
delLineLeft(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
delLineRight(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getXOffset(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
chooseCaretX(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setXCaretPolicy(This::wxStyledTextCtrl(), CaretPolicy::integer(), CaretSlop::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setYCaretPolicy(This::wxStyledTextCtrl(), CaretPolicy::integer(), CaretSlop::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPrintWrapMode(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setHotspotActiveForeground(This::wxStyledTextCtrl(), UseSetting::bool(), Fore::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setHotspotActiveBackground(This::wxStyledTextCtrl(), UseSetting::bool(), Back::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setHotspotActiveUnderline(This::wxStyledTextCtrl(), Underline::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setHotspotSingleLine(This::wxStyledTextCtrl(), SingleLine::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
paraDownExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
paraUp(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
paraUpExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
positionBefore(This::wxStyledTextCtrl(), Pos::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
positionAfter(This::wxStyledTextCtrl(), Pos::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
copyRange(This::wxStyledTextCtrl(), Start::integer(), End::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
copyText(This::wxStyledTextCtrl(), Length::integer(), Text::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelectionMode(This::wxStyledTextCtrl(), Mode::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectionMode(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineDownRectExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineUpRectExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
charLeftRectExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
charRightRectExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
homeRectExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
vCHomeRectExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineEndRectExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pageUpRectExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pageDownRectExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
stutteredPageUp(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
stutteredPageUpExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
stutteredPageDown(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
stutteredPageDownExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordLeftEnd(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordLeftEndExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordRightEnd(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
wordRightEndExtend(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWhitespaceChars(This::wxStyledTextCtrl(), Characters::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCharsDefault(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoCompGetCurrent(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
allocate(This::wxStyledTextCtrl(), Bytes::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findColumn(This::wxStyledTextCtrl(), Line::integer(), Column::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCaretSticky(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCaretSticky(This::wxStyledTextCtrl(), UseCaretStickyBehaviour::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
toggleCaretSticky(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setPasteConvertEndings(This::wxStyledTextCtrl(), Convert::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPasteConvertEndings(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
selectionDuplicate(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCaretLineBackAlpha(This::wxStyledTextCtrl(), Alpha::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCaretLineBackAlpha(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
startRecord(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
stopRecord(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLexer(This::wxStyledTextCtrl(), Lexer::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLexer(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
colourise(This::wxStyledTextCtrl(), Start::integer(), End::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setProperty(This::wxStyledTextCtrl(), Key::string(), Value::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setKeyWords(This::wxStyledTextCtrl(), KeywordSet::integer(), KeyWords::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLexerLanguage(This::wxStyledTextCtrl(), Language::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getProperty(This::wxStyledTextCtrl(), Key::string()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStyleBitsNeeded(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCurrentLine(This::wxStyledTextCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetSpec(This::wxStyledTextCtrl(), StyleNum::integer(), Spec::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetFont(This::wxStyledTextCtrl(), StyleNum::integer(), Font::wxFont() (see module wxFont)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetFontAttr(This::wxStyledTextCtrl(), StyleNum::integer(), Size::integer(), FaceName::string(), Bold::bool(), Italic::bool(), Underline::bool()) -> ok
.br
.RS
.LP
Equivalent to \fBstyleSetFontAttr(This, StyleNum, Size, FaceName, Bold, Italic, Underline, [])\fR\&\&.
.RE
.LP
.B
styleSetFontAttr(This::wxStyledTextCtrl(), StyleNum::integer(), Size::integer(), FaceName::string(), Bold::bool(), Italic::bool(), Underline::bool(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {encoding, WxFontEncoding}
.br
WxFontEncoding = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxFontEncoding is one of ?wxFONTENCODING_SYSTEM | ?wxFONTENCODING_DEFAULT | ?wxFONTENCODING_ISO8859_1 | ?wxFONTENCODING_ISO8859_2 | ?wxFONTENCODING_ISO8859_3 | ?wxFONTENCODING_ISO8859_4 | ?wxFONTENCODING_ISO8859_5 | ?wxFONTENCODING_ISO8859_6 | ?wxFONTENCODING_ISO8859_7 | ?wxFONTENCODING_ISO8859_8 | ?wxFONTENCODING_ISO8859_9 | ?wxFONTENCODING_ISO8859_10 | ?wxFONTENCODING_ISO8859_11 | ?wxFONTENCODING_ISO8859_12 | ?wxFONTENCODING_ISO8859_13 | ?wxFONTENCODING_ISO8859_14 | ?wxFONTENCODING_ISO8859_15 | ?wxFONTENCODING_ISO8859_MAX | ?wxFONTENCODING_KOI8 | ?wxFONTENCODING_KOI8_U | ?wxFONTENCODING_ALTERNATIVE | ?wxFONTENCODING_BULGARIAN | ?wxFONTENCODING_CP437 | ?wxFONTENCODING_CP850 | ?wxFONTENCODING_CP852 | ?wxFONTENCODING_CP855 | ?wxFONTENCODING_CP866 | ?wxFONTENCODING_CP874 | ?wxFONTENCODING_CP932 | ?wxFONTENCODING_CP936 | ?wxFONTENCODING_CP949 | ?wxFONTENCODING_CP950 | ?wxFONTENCODING_CP1250 | ?wxFONTENCODING_CP1251 | ?wxFONTENCODING_CP1252 | ?wxFONTENCODING_CP1253 | ?wxFONTENCODING_CP1254 | ?wxFONTENCODING_CP1255 | ?wxFONTENCODING_CP1256 | ?wxFONTENCODING_CP1257 | ?wxFONTENCODING_CP12_MAX | ?wxFONTENCODING_UTF7 | ?wxFONTENCODING_UTF8 | ?wxFONTENCODING_EUC_JP | ?wxFONTENCODING_UTF16BE | ?wxFONTENCODING_UTF16LE | ?wxFONTENCODING_UTF32BE | ?wxFONTENCODING_UTF32LE | ?wxFONTENCODING_MACROMAN | ?wxFONTENCODING_MACJAPANESE | ?wxFONTENCODING_MACCHINESETRAD | ?wxFONTENCODING_MACKOREAN | ?wxFONTENCODING_MACARABIC | ?wxFONTENCODING_MACHEBREW | ?wxFONTENCODING_MACGREEK | ?wxFONTENCODING_MACCYRILLIC | ?wxFONTENCODING_MACDEVANAGARI | ?wxFONTENCODING_MACGURMUKHI | ?wxFONTENCODING_MACGUJARATI | ?wxFONTENCODING_MACORIYA | ?wxFONTENCODING_MACBENGALI | ?wxFONTENCODING_MACTAMIL | ?wxFONTENCODING_MACTELUGU | ?wxFONTENCODING_MACKANNADA | ?wxFONTENCODING_MACMALAJALAM | ?wxFONTENCODING_MACSINHALESE | ?wxFONTENCODING_MACBURMESE | ?wxFONTENCODING_MACKHMER | ?wxFONTENCODING_MACTHAI | ?wxFONTENCODING_MACLAOTIAN | ?wxFONTENCODING_MACGEORGIAN | ?wxFONTENCODING_MACARMENIAN | ?wxFONTENCODING_MACCHINESESIMP | ?wxFONTENCODING_MACTIBETAN | ?wxFONTENCODING_MACMONGOLIAN | ?wxFONTENCODING_MACETHIOPIC | ?wxFONTENCODING_MACCENTRALEUR | ?wxFONTENCODING_MACVIATNAMESE | ?wxFONTENCODING_MACARABICEXT | ?wxFONTENCODING_MACSYMBOL | ?wxFONTENCODING_MACDINGBATS | ?wxFONTENCODING_MACTURKISH | ?wxFONTENCODING_MACCROATIAN | ?wxFONTENCODING_MACICELANDIC | ?wxFONTENCODING_MACROMANIAN | ?wxFONTENCODING_MACCELTIC | ?wxFONTENCODING_MACGAELIC | ?wxFONTENCODING_MACKEYBOARD | ?wxFONTENCODING_MAX | ?wxFONTENCODING_MACMIN | ?wxFONTENCODING_MACMAX | ?wxFONTENCODING_UTF16 | ?wxFONTENCODING_UTF32 | ?wxFONTENCODING_UNICODE | ?wxFONTENCODING_GB2312 | ?wxFONTENCODING_BIG5 | ?wxFONTENCODING_SHIFT_JIS
.RE
.LP
.B
styleSetCharacterSet(This::wxStyledTextCtrl(), Style::integer(), CharacterSet::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
styleSetFontEncoding(This::wxStyledTextCtrl(), Style::integer(), Encoding::WxFontEncoding) -> ok
.br
.RS
.TP 3
Types:

WxFontEncoding = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxFontEncoding is one of ?wxFONTENCODING_SYSTEM | ?wxFONTENCODING_DEFAULT | ?wxFONTENCODING_ISO8859_1 | ?wxFONTENCODING_ISO8859_2 | ?wxFONTENCODING_ISO8859_3 | ?wxFONTENCODING_ISO8859_4 | ?wxFONTENCODING_ISO8859_5 | ?wxFONTENCODING_ISO8859_6 | ?wxFONTENCODING_ISO8859_7 | ?wxFONTENCODING_ISO8859_8 | ?wxFONTENCODING_ISO8859_9 | ?wxFONTENCODING_ISO8859_10 | ?wxFONTENCODING_ISO8859_11 | ?wxFONTENCODING_ISO8859_12 | ?wxFONTENCODING_ISO8859_13 | ?wxFONTENCODING_ISO8859_14 | ?wxFONTENCODING_ISO8859_15 | ?wxFONTENCODING_ISO8859_MAX | ?wxFONTENCODING_KOI8 | ?wxFONTENCODING_KOI8_U | ?wxFONTENCODING_ALTERNATIVE | ?wxFONTENCODING_BULGARIAN | ?wxFONTENCODING_CP437 | ?wxFONTENCODING_CP850 | ?wxFONTENCODING_CP852 | ?wxFONTENCODING_CP855 | ?wxFONTENCODING_CP866 | ?wxFONTENCODING_CP874 | ?wxFONTENCODING_CP932 | ?wxFONTENCODING_CP936 | ?wxFONTENCODING_CP949 | ?wxFONTENCODING_CP950 | ?wxFONTENCODING_CP1250 | ?wxFONTENCODING_CP1251 | ?wxFONTENCODING_CP1252 | ?wxFONTENCODING_CP1253 | ?wxFONTENCODING_CP1254 | ?wxFONTENCODING_CP1255 | ?wxFONTENCODING_CP1256 | ?wxFONTENCODING_CP1257 | ?wxFONTENCODING_CP12_MAX | ?wxFONTENCODING_UTF7 | ?wxFONTENCODING_UTF8 | ?wxFONTENCODING_EUC_JP | ?wxFONTENCODING_UTF16BE | ?wxFONTENCODING_UTF16LE | ?wxFONTENCODING_UTF32BE | ?wxFONTENCODING_UTF32LE | ?wxFONTENCODING_MACROMAN | ?wxFONTENCODING_MACJAPANESE | ?wxFONTENCODING_MACCHINESETRAD | ?wxFONTENCODING_MACKOREAN | ?wxFONTENCODING_MACARABIC | ?wxFONTENCODING_MACHEBREW | ?wxFONTENCODING_MACGREEK | ?wxFONTENCODING_MACCYRILLIC | ?wxFONTENCODING_MACDEVANAGARI | ?wxFONTENCODING_MACGURMUKHI | ?wxFONTENCODING_MACGUJARATI | ?wxFONTENCODING_MACORIYA | ?wxFONTENCODING_MACBENGALI | ?wxFONTENCODING_MACTAMIL | ?wxFONTENCODING_MACTELUGU | ?wxFONTENCODING_MACKANNADA | ?wxFONTENCODING_MACMALAJALAM | ?wxFONTENCODING_MACSINHALESE | ?wxFONTENCODING_MACBURMESE | ?wxFONTENCODING_MACKHMER | ?wxFONTENCODING_MACTHAI | ?wxFONTENCODING_MACLAOTIAN | ?wxFONTENCODING_MACGEORGIAN | ?wxFONTENCODING_MACARMENIAN | ?wxFONTENCODING_MACCHINESESIMP | ?wxFONTENCODING_MACTIBETAN | ?wxFONTENCODING_MACMONGOLIAN | ?wxFONTENCODING_MACETHIOPIC | ?wxFONTENCODING_MACCENTRALEUR | ?wxFONTENCODING_MACVIATNAMESE | ?wxFONTENCODING_MACARABICEXT | ?wxFONTENCODING_MACSYMBOL | ?wxFONTENCODING_MACDINGBATS | ?wxFONTENCODING_MACTURKISH | ?wxFONTENCODING_MACCROATIAN | ?wxFONTENCODING_MACICELANDIC | ?wxFONTENCODING_MACROMANIAN | ?wxFONTENCODING_MACCELTIC | ?wxFONTENCODING_MACGAELIC | ?wxFONTENCODING_MACKEYBOARD | ?wxFONTENCODING_MAX | ?wxFONTENCODING_MACMIN | ?wxFONTENCODING_MACMAX | ?wxFONTENCODING_UTF16 | ?wxFONTENCODING_UTF32 | ?wxFONTENCODING_UNICODE | ?wxFONTENCODING_GB2312 | ?wxFONTENCODING_BIG5 | ?wxFONTENCODING_SHIFT_JIS
.RE
.LP
.B
cmdKeyExecute(This::wxStyledTextCtrl(), Cmd::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMargins(This::wxStyledTextCtrl(), Left::integer(), Right::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelection(This::wxStyledTextCtrl()) -> {StartPos::integer(), EndPos::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pointFromPosition(This::wxStyledTextCtrl(), Pos::integer()) -> {X::integer(), Y::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scrollToLine(This::wxStyledTextCtrl(), Line::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scrollToColumn(This::wxStyledTextCtrl(), Column::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
sendMsg(This::wxStyledTextCtrl(), Msg::integer()) -> integer()
.br
.RS
.LP
Equivalent to \fBsendMsg(This, Msg, [])\fR\&\&.
.RE
.LP
.B
sendMsg(This::wxStyledTextCtrl(), Msg::integer(), Options::[Option]) -> integer()
.br
.RS
.TP 3
Types:

Option = {wp, integer()} | {lp, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setVScrollBar(This::wxStyledTextCtrl(), Bar::wxScrollBar() (see module wxScrollBar)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setHScrollBar(This::wxStyledTextCtrl(), Bar::wxScrollBar() (see module wxScrollBar)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLastKeydownProcessed(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLastKeydownProcessed(This::wxStyledTextCtrl(), Val::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
saveFile(This::wxStyledTextCtrl(), Filename::string()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadFile(This::wxStyledTextCtrl(), Filename::string()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
doDragOver(This::wxStyledTextCtrl(), X::integer(), Y::integer(), Def::WxDragResult) -> WxDragResult
.br
.RS
.TP 3
Types:

WxDragResult = integer()
.br
WxDragResult = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxDragResult is one of ?wxDragError | ?wxDragNone | ?wxDragCopy | ?wxDragMove | ?wxDragLink | ?wxDragCancel 
.br
WxDragResult is one of ?wxDragError | ?wxDragNone | ?wxDragCopy | ?wxDragMove | ?wxDragLink | ?wxDragCancel
.RE
.LP
.B
doDropText(This::wxStyledTextCtrl(), X::integer(), Y::integer(), Data::string()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getUseAntiAliasing(This::wxStyledTextCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addTextRaw(This::wxStyledTextCtrl(), Text::binary()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertTextRaw(This::wxStyledTextCtrl(), Pos::integer(), Text::binary()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCurLineRaw(This::wxStyledTextCtrl()) -> {binary(), LinePos::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLineRaw(This::wxStyledTextCtrl(), Line::integer()) -> binary()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectedTextRaw(This::wxStyledTextCtrl()) -> binary()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTextRangeRaw(This::wxStyledTextCtrl(), StartPos::integer(), EndPos::integer()) -> binary()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTextRaw(This::wxStyledTextCtrl(), Text::binary()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTextRaw(This::wxStyledTextCtrl()) -> binary()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
appendTextRaw(This::wxStyledTextCtrl(), Text::binary()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxStyledTextCtrl()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>