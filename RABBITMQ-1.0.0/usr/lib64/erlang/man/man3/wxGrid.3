.TH wxGrid 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxGrid \- See external documentation: wxGrid.
.SH DESCRIPTION
.LP
See external documentation: wxGrid\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxScrolledWindow\fR\& 
.br
\fBwxPanel\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxGrid()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxGrid()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow), Id::integer()) -> wxGrid()
.br
.RS
.LP
Equivalent to \fBnew(Parent, Id, [])\fR\&\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow), X::integer(), X::integer() | term()) -> wxGrid()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI new(Parent::wxWindow:wxWindow(), X::integer(), Y::integer()) -> new(Parent,X,Y, []) \fR\&
.LP
\fI new(Parent::wxWindow:wxWindow(), Id::integer(), [Option]) -> wxGrid() \fR\& 
.br
Option = {pos, {X::integer(),Y::integer()}} | {size, {W::integer(),H::integer()}} | {style, integer()}
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow), X::integer(), Y::integer(), Options::[Option]) -> wxGrid()
.br
.RS
.TP 3
Types:

Option = {w, integer()} | {h, integer()} | {style, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
appendCols(This::wxGrid()) -> bool()
.br
.RS
.LP
Equivalent to \fBappendCols(This, [])\fR\&\&.
.RE
.LP
.B
appendCols(This::wxGrid(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {numCols, integer()} | {updateLabels, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
appendRows(This::wxGrid()) -> bool()
.br
.RS
.LP
Equivalent to \fBappendRows(This, [])\fR\&\&.
.RE
.LP
.B
appendRows(This::wxGrid(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {numRows, integer()} | {updateLabels, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoSize(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoSizeColumn(This::wxGrid(), Col::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBautoSizeColumn(This, Col, [])\fR\&\&.
.RE
.LP
.B
autoSizeColumn(This::wxGrid(), Col::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {setAsMin, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoSizeColumns(This::wxGrid()) -> ok
.br
.RS
.LP
Equivalent to \fBautoSizeColumns(This, [])\fR\&\&.
.RE
.LP
.B
autoSizeColumns(This::wxGrid(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {setAsMin, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoSizeRow(This::wxGrid(), Row::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBautoSizeRow(This, Row, [])\fR\&\&.
.RE
.LP
.B
autoSizeRow(This::wxGrid(), Row::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {setAsMin, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
autoSizeRows(This::wxGrid()) -> ok
.br
.RS
.LP
Equivalent to \fBautoSizeRows(This, [])\fR\&\&.
.RE
.LP
.B
autoSizeRows(This::wxGrid(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {setAsMin, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
beginBatch(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
blockToDeviceRect(This::wxGrid(), TopLeft::{R::integer(), C::integer()}, BottomRight::{R::integer(), C::integer()}) -> {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canDragColSize(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canDragRowSize(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canDragGridSize(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canEnableCellControl(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cellToRect(This::wxGrid(), Coords::{R::integer(), C::integer()}) -> {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cellToRect(This::wxGrid(), Row::integer(), Col::integer()) -> {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clearGrid(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clearSelection(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
createGrid(This::wxGrid(), NumRows::integer(), NumCols::integer()) -> bool()
.br
.RS
.LP
Equivalent to \fBcreateGrid(This, NumRows, NumCols, [])\fR\&\&.
.RE
.LP
.B
createGrid(This::wxGrid(), NumRows::integer(), NumCols::integer(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {selmode, WxGridSelectionModes}
.br
WxGridSelectionModes = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxGridSelectionModes is one of ?wxGrid_wxGridSelectCells | ?wxGrid_wxGridSelectRows | ?wxGrid_wxGridSelectColumns
.RE
.LP
.B
deleteCols(This::wxGrid()) -> bool()
.br
.RS
.LP
Equivalent to \fBdeleteCols(This, [])\fR\&\&.
.RE
.LP
.B
deleteCols(This::wxGrid(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {pos, integer()} | {numCols, integer()} | {updateLabels, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteRows(This::wxGrid()) -> bool()
.br
.RS
.LP
Equivalent to \fBdeleteRows(This, [])\fR\&\&.
.RE
.LP
.B
deleteRows(This::wxGrid(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {pos, integer()} | {numRows, integer()} | {updateLabels, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
disableCellEditControl(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
disableDragColSize(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
disableDragGridSize(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
disableDragRowSize(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enableCellEditControl(This::wxGrid()) -> ok
.br
.RS
.LP
Equivalent to \fBenableCellEditControl(This, [])\fR\&\&.
.RE
.LP
.B
enableCellEditControl(This::wxGrid(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {enable, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enableDragColSize(This::wxGrid()) -> ok
.br
.RS
.LP
Equivalent to \fBenableDragColSize(This, [])\fR\&\&.
.RE
.LP
.B
enableDragColSize(This::wxGrid(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {enable, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enableDragGridSize(This::wxGrid()) -> ok
.br
.RS
.LP
Equivalent to \fBenableDragGridSize(This, [])\fR\&\&.
.RE
.LP
.B
enableDragGridSize(This::wxGrid(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {enable, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enableDragRowSize(This::wxGrid()) -> ok
.br
.RS
.LP
Equivalent to \fBenableDragRowSize(This, [])\fR\&\&.
.RE
.LP
.B
enableDragRowSize(This::wxGrid(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {enable, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enableEditing(This::wxGrid(), Edit::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enableGridLines(This::wxGrid()) -> ok
.br
.RS
.LP
Equivalent to \fBenableGridLines(This, [])\fR\&\&.
.RE
.LP
.B
enableGridLines(This::wxGrid(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {enable, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
endBatch(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
fit(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
forceRefresh(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getBatchCount(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCellAlignment(This::wxGrid(), Row::integer(), Col::integer()) -> {Horiz::integer(), Vert::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCellBackgroundColour(This::wxGrid(), Row::integer(), Col::integer()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCellEditor(This::wxGrid(), Row::integer(), Col::integer()) -> wxGridCellEditor() (see module wxGridCellEditor)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCellFont(This::wxGrid(), Row::integer(), Col::integer()) -> wxFont() (see module wxFont)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCellRenderer(This::wxGrid(), Row::integer(), Col::integer()) -> wxGridCellRenderer() (see module wxGridCellRenderer)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCellTextColour(This::wxGrid(), Row::integer(), Col::integer()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCellValue(This::wxGrid(), Coords::{R::integer(), C::integer()}) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCellValue(This::wxGrid(), Row::integer(), Col::integer()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getColLabelAlignment(This::wxGrid()) -> {Horiz::integer(), Vert::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getColLabelSize(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getColLabelValue(This::wxGrid(), Col::integer()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getColMinimalAcceptableWidth(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultCellAlignment(This::wxGrid()) -> {Horiz::integer(), Vert::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultCellBackgroundColour(This::wxGrid()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultCellFont(This::wxGrid()) -> wxFont() (see module wxFont)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultCellTextColour(This::wxGrid()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultColLabelSize(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultColSize(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultEditor(This::wxGrid()) -> wxGridCellEditor() (see module wxGridCellEditor)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultEditorForCell(This::wxGrid(), C::{R::integer(), C::integer()}) -> wxGridCellEditor() (see module wxGridCellEditor)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultEditorForCell(This::wxGrid(), Row::integer(), Col::integer()) -> wxGridCellEditor() (see module wxGridCellEditor)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultEditorForType(This::wxGrid(), TypeName::string()) -> wxGridCellEditor() (see module wxGridCellEditor)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultRenderer(This::wxGrid()) -> wxGridCellRenderer() (see module wxGridCellRenderer)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultRendererForCell(This::wxGrid(), Row::integer(), Col::integer()) -> wxGridCellRenderer() (see module wxGridCellRenderer)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultRendererForType(This::wxGrid(), TypeName::string()) -> wxGridCellRenderer() (see module wxGridCellRenderer)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultRowLabelSize(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDefaultRowSize(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getGridCursorCol(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getGridCursorRow(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getGridLineColour(This::wxGrid()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
gridLinesEnabled(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLabelBackgroundColour(This::wxGrid()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLabelFont(This::wxGrid()) -> wxFont() (see module wxFont)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLabelTextColour(This::wxGrid()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getNumberCols(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getNumberRows(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getOrCreateCellAttr(This::wxGrid(), Row::integer(), Col::integer()) -> wxGridCellAttr() (see module wxGridCellAttr)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRowMinimalAcceptableHeight(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRowLabelAlignment(This::wxGrid()) -> {Horiz::integer(), Vert::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRowLabelSize(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRowLabelValue(This::wxGrid(), Row::integer()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRowSize(This::wxGrid(), Row::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getScrollLineX(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getScrollLineY(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectedCells(This::wxGrid()) -> [{R::integer(), C::integer()}]
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectedCols(This::wxGrid()) -> [integer()]
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectedRows(This::wxGrid()) -> [integer()]
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectionBackground(This::wxGrid()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectionBlockTopLeft(This::wxGrid()) -> [{R::integer(), C::integer()}]
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectionBlockBottomRight(This::wxGrid()) -> [{R::integer(), C::integer()}]
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectionForeground(This::wxGrid()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getViewWidth(This::wxGrid()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getGridWindow(This::wxGrid()) -> wxWindow() (see module wxWindow)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getGridRowLabelWindow(This::wxGrid()) -> wxWindow() (see module wxWindow)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getGridColLabelWindow(This::wxGrid()) -> wxWindow() (see module wxWindow)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getGridCornerLabelWindow(This::wxGrid()) -> wxWindow() (see module wxWindow)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hideCellEditControl(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertCols(This::wxGrid()) -> bool()
.br
.RS
.LP
Equivalent to \fBinsertCols(This, [])\fR\&\&.
.RE
.LP
.B
insertCols(This::wxGrid(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {pos, integer()} | {numCols, integer()} | {updateLabels, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertRows(This::wxGrid()) -> bool()
.br
.RS
.LP
Equivalent to \fBinsertRows(This, [])\fR\&\&.
.RE
.LP
.B
insertRows(This::wxGrid(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {pos, integer()} | {numRows, integer()} | {updateLabels, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isCellEditControlEnabled(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isCurrentCellReadOnly(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isEditable(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isInSelection(This::wxGrid(), Coords::{R::integer(), C::integer()}) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isInSelection(This::wxGrid(), Row::integer(), Col::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isReadOnly(This::wxGrid(), Row::integer(), Col::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isSelection(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isVisible(This::wxGrid(), Coords::{R::integer(), C::integer()}) -> bool()
.br
.RS
.LP
Equivalent to \fBisVisible(This, Coords, [])\fR\&\&.
.RE
.LP
.B
isVisible(This::wxGrid(), X::integer() | term(), X::integer() | term()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI isVisible(This::wxGrid(), Row::integer(), Col::integer()) -> isVisible(This,Row,Col, []) \fR\&
.LP
\fI isVisible(This::wxGrid(), Coords::{R::integer(),C::integer()}, [Option]) -> bool() \fR\& 
.br
Option = {wholeCellVisible, bool()}
.RE
.LP
.B
isVisible(This::wxGrid(), Row::integer(), Col::integer(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {wholeCellVisible, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
makeCellVisible(This::wxGrid(), Coords::{R::integer(), C::integer()}) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
makeCellVisible(This::wxGrid(), Row::integer(), Col::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveCursorDown(This::wxGrid(), ExpandSelection::bool()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveCursorLeft(This::wxGrid(), ExpandSelection::bool()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveCursorRight(This::wxGrid(), ExpandSelection::bool()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveCursorUp(This::wxGrid(), ExpandSelection::bool()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveCursorDownBlock(This::wxGrid(), ExpandSelection::bool()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveCursorLeftBlock(This::wxGrid(), ExpandSelection::bool()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveCursorRightBlock(This::wxGrid(), ExpandSelection::bool()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveCursorUpBlock(This::wxGrid(), ExpandSelection::bool()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
movePageDown(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
movePageUp(This::wxGrid()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
registerDataType(This::wxGrid(), TypeName::string(), Renderer::wxGridCellRenderer() (see module wxGridCellRenderer), Editor::wxGridCellEditor() (see module wxGridCellEditor)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
saveEditControlValue(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
selectAll(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
selectBlock(This::wxGrid(), TopLeft::{R::integer(), C::integer()}, BottomRight::{R::integer(), C::integer()}) -> ok
.br
.RS
.LP
Equivalent to \fBselectBlock(This, TopLeft, BottomRight, [])\fR\&\&.
.RE
.LP
.B
selectBlock(This::wxGrid(), TopLeft::{R::integer(), C::integer()}, BottomRight::{R::integer(), C::integer()}, Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {addToSelected, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
selectBlock(This::wxGrid(), TopRow::integer(), LeftCol::integer(), BottomRow::integer(), RightCol::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBselectBlock(This, TopRow, LeftCol, BottomRow, RightCol, [])\fR\&\&.
.RE
.LP
.B
selectBlock(This::wxGrid(), TopRow::integer(), LeftCol::integer(), BottomRow::integer(), RightCol::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {addToSelected, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
selectCol(This::wxGrid(), Col::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBselectCol(This, Col, [])\fR\&\&.
.RE
.LP
.B
selectCol(This::wxGrid(), Col::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {addToSelected, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
selectRow(This::wxGrid(), Row::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBselectRow(This, Row, [])\fR\&\&.
.RE
.LP
.B
selectRow(This::wxGrid(), Row::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {addToSelected, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCellAlignment(This::wxGrid(), Align::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCellAlignment(This::wxGrid(), Align::integer(), Row::integer(), Col::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCellAlignment(This::wxGrid(), Row::integer(), Col::integer(), Horiz::integer(), Vert::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCellBackgroundColour(This::wxGrid(), Col::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCellBackgroundColour(This::wxGrid(), X::integer() | term(), X::integer(), X::term() | integer()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setCellBackgroundColour(This::wxGrid(), Row::integer(), Col::integer(), Val::wx:colour()) -> ok \fR\& 
.LP
\fI setCellBackgroundColour(This::wxGrid(), Colour::wx:colour(), Row::integer(), Col::integer()) -> ok \fR\& 
.RE
.LP
.B
setCellEditor(This::wxGrid(), Row::integer(), Col::integer(), Editor::wxGridCellEditor() (see module wxGridCellEditor)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCellFont(This::wxGrid(), Row::integer(), Col::integer(), Val::wxFont() (see module wxFont)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCellRenderer(This::wxGrid(), Row::integer(), Col::integer(), Renderer::wxGridCellRenderer() (see module wxGridCellRenderer)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCellTextColour(This::wxGrid(), Col::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCellTextColour(This::wxGrid(), X::integer() | term(), X::integer(), X::term() | integer()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setCellTextColour(This::wxGrid(), Row::integer(), Col::integer(), Val::wx:colour()) -> ok \fR\& 
.LP
\fI setCellTextColour(This::wxGrid(), Val::wx:colour(), Row::integer(), Col::integer()) -> ok \fR\& 
.RE
.LP
.B
setCellValue(This::wxGrid(), Coords::{R::integer(), C::integer()}, S::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCellValue(This::wxGrid(), X::integer() | string(), X::integer(), X::string() | integer()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setCellValue(This::wxGrid(), Row::integer(), Col::integer(), S::string()) -> ok \fR\& 
.LP
\fI setCellValue(This::wxGrid(), Val::string(), Row::integer(), Col::integer()) -> ok \fR\& 
.RE
.LP
.B
setColAttr(This::wxGrid(), Col::integer(), Attr::wxGridCellAttr() (see module wxGridCellAttr)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColFormatBool(This::wxGrid(), Col::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColFormatNumber(This::wxGrid(), Col::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColFormatFloat(This::wxGrid(), Col::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBsetColFormatFloat(This, Col, [])\fR\&\&.
.RE
.LP
.B
setColFormatFloat(This::wxGrid(), Col::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {width, integer()} | {precision, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColFormatCustom(This::wxGrid(), Col::integer(), TypeName::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColLabelAlignment(This::wxGrid(), Horiz::integer(), Vert::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColLabelSize(This::wxGrid(), Height::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColLabelValue(This::wxGrid(), Col::integer(), Val::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColMinimalWidth(This::wxGrid(), Col::integer(), Width::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColMinimalAcceptableWidth(This::wxGrid(), Width::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColSize(This::wxGrid(), Col::integer(), Width::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDefaultCellAlignment(This::wxGrid(), Horiz::integer(), Vert::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDefaultCellBackgroundColour(This::wxGrid(), Val::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDefaultCellFont(This::wxGrid(), Val::wxFont() (see module wxFont)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDefaultCellTextColour(This::wxGrid(), Val::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDefaultEditor(This::wxGrid(), Editor::wxGridCellEditor() (see module wxGridCellEditor)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDefaultRenderer(This::wxGrid(), Renderer::wxGridCellRenderer() (see module wxGridCellRenderer)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDefaultColSize(This::wxGrid(), Width::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBsetDefaultColSize(This, Width, [])\fR\&\&.
.RE
.LP
.B
setDefaultColSize(This::wxGrid(), Width::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {resizeExistingCols, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDefaultRowSize(This::wxGrid(), Height::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBsetDefaultRowSize(This, Height, [])\fR\&\&.
.RE
.LP
.B
setDefaultRowSize(This::wxGrid(), Height::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {resizeExistingRows, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setGridCursor(This::wxGrid(), Row::integer(), Col::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setGridLineColour(This::wxGrid(), Val::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLabelBackgroundColour(This::wxGrid(), Val::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLabelFont(This::wxGrid(), Val::wxFont() (see module wxFont)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLabelTextColour(This::wxGrid(), Val::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMargins(This::wxGrid(), ExtraWidth::integer(), ExtraHeight::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setReadOnly(This::wxGrid(), Row::integer(), Col::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBsetReadOnly(This, Row, Col, [])\fR\&\&.
.RE
.LP
.B
setReadOnly(This::wxGrid(), Row::integer(), Col::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {isReadOnly, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setRowAttr(This::wxGrid(), Row::integer(), Attr::wxGridCellAttr() (see module wxGridCellAttr)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setRowLabelAlignment(This::wxGrid(), Horiz::integer(), Vert::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setRowLabelSize(This::wxGrid(), Width::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setRowLabelValue(This::wxGrid(), Row::integer(), Val::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setRowMinimalHeight(This::wxGrid(), Row::integer(), Width::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setRowMinimalAcceptableHeight(This::wxGrid(), Width::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setRowSize(This::wxGrid(), Row::integer(), Height::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setScrollLineX(This::wxGrid(), X::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setScrollLineY(This::wxGrid(), Y::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelectionBackground(This::wxGrid(), C::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelectionForeground(This::wxGrid(), C::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSelectionMode(This::wxGrid(), Selmode::WxGridSelectionModes) -> ok
.br
.RS
.TP 3
Types:

WxGridSelectionModes = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxGridSelectionModes is one of ?wxGrid_wxGridSelectCells | ?wxGrid_wxGridSelectRows | ?wxGrid_wxGridSelectColumns
.RE
.LP
.B
showCellEditControl(This::wxGrid()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
xToCol(This::wxGrid(), X::integer()) -> integer()
.br
.RS
.LP
Equivalent to \fBxToCol(This, X, [])\fR\&\&.
.RE
.LP
.B
xToCol(This::wxGrid(), X::integer(), Options::[Option]) -> integer()
.br
.RS
.TP 3
Types:

Option = {clipToMinMax, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
xToEdgeOfCol(This::wxGrid(), X::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
yToEdgeOfRow(This::wxGrid(), Y::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
yToRow(This::wxGrid(), Y::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxGrid()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>