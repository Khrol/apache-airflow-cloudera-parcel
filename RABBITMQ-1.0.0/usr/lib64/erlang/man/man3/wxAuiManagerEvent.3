.TH wxAuiManagerEvent 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxAuiManagerEvent \- See external documentation: wxAuiManagerEvent.
.SH DESCRIPTION
.LP
See external documentation: wxAuiManagerEvent\&.
.RS 2
.TP 2
.B
Use \fBwxEvtHandler:connect/3\fR\& with EventType::
\fIaui_pane_button\fR\&, \fIaui_pane_close\fR\&, \fIaui_pane_maximize\fR\&, \fIaui_pane_restore\fR\&, \fIaui_render\fR\&, \fIaui_find_manager\fR\&
.RE
.LP
See also the message variant \fB#wxAuiManager{\fR\&} event record type\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxEvent\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxAuiManagerEvent()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
setManager(This::wxAuiManagerEvent(), Mgr::wxAuiManager() (see module wxAuiManager)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getManager(This::wxAuiManagerEvent()) -> wxAuiManager() (see module wxAuiManager)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setPane(This::wxAuiManagerEvent(), P::wxAuiPaneInfo() (see module wxAuiPaneInfo)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPane(This::wxAuiManagerEvent()) -> wxAuiPaneInfo() (see module wxAuiPaneInfo)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setButton(This::wxAuiManagerEvent(), B::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getButton(This::wxAuiManagerEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDC(This::wxAuiManagerEvent(), Pdc::wxDC() (see module wxDC)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDC(This::wxAuiManagerEvent()) -> wxDC() (see module wxDC)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
veto(This::wxAuiManagerEvent()) -> ok
.br
.RS
.LP
Equivalent to \fBveto(This, [])\fR\&\&.
.RE
.LP
.B
veto(This::wxAuiManagerEvent(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {veto, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getVeto(This::wxAuiManagerEvent()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCanVeto(This::wxAuiManagerEvent(), Can_veto::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
canVeto(This::wxAuiManagerEvent()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.SH AUTHORS
.LP

.I
<>