.TH wxSplitterWindow 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxSplitterWindow \- See external documentation: wxSplitterWindow.
.SH DESCRIPTION
.LP
See external documentation: wxSplitterWindow\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxSplitterWindow()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxSplitterWindow()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow)) -> wxSplitterWindow()
.br
.RS
.LP
Equivalent to \fBnew(Parent, [])\fR\&\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow), Options::[Option]) -> wxSplitterWindow()
.br
.RS
.TP 3
Types:

Option = {id, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This::wxSplitterWindow(), Parent::wxWindow() (see module wxWindow)) -> bool()
.br
.RS
.LP
Equivalent to \fBcreate(This, Parent, [])\fR\&\&.
.RE
.LP
.B
create(This::wxSplitterWindow(), Parent::wxWindow() (see module wxWindow), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {id, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMinimumPaneSize(This::wxSplitterWindow()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSashGravity(This::wxSplitterWindow()) -> float()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSashPosition(This::wxSplitterWindow()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSplitMode(This::wxSplitterWindow()) -> WxSplitMode
.br
.RS
.TP 3
Types:

WxSplitMode = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxSplitMode is one of ?wxSPLIT_HORIZONTAL | ?wxSPLIT_VERTICAL
.RE
.LP
.B
getWindow1(This::wxSplitterWindow()) -> wxWindow() (see module wxWindow)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWindow2(This::wxSplitterWindow()) -> wxWindow() (see module wxWindow)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
initialize(This::wxSplitterWindow(), Window::wxWindow() (see module wxWindow)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isSplit(This::wxSplitterWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
replaceWindow(This::wxSplitterWindow(), WinOld::wxWindow() (see module wxWindow), WinNew::wxWindow() (see module wxWindow)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSashGravity(This::wxSplitterWindow(), Gravity::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSashPosition(This::wxSplitterWindow(), Position::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBsetSashPosition(This, Position, [])\fR\&\&.
.RE
.LP
.B
setSashPosition(This::wxSplitterWindow(), Position::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {redraw, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSashSize(This::wxSplitterWindow(), Width::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMinimumPaneSize(This::wxSplitterWindow(), Min::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSplitMode(This::wxSplitterWindow(), Mode::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
splitHorizontally(This::wxSplitterWindow(), Window1::wxWindow() (see module wxWindow), Window2::wxWindow() (see module wxWindow)) -> bool()
.br
.RS
.LP
Equivalent to \fBsplitHorizontally(This, Window1, Window2, [])\fR\&\&.
.RE
.LP
.B
splitHorizontally(This::wxSplitterWindow(), Window1::wxWindow() (see module wxWindow), Window2::wxWindow() (see module wxWindow), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {sashPosition, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
splitVertically(This::wxSplitterWindow(), Window1::wxWindow() (see module wxWindow), Window2::wxWindow() (see module wxWindow)) -> bool()
.br
.RS
.LP
Equivalent to \fBsplitVertically(This, Window1, Window2, [])\fR\&\&.
.RE
.LP
.B
splitVertically(This::wxSplitterWindow(), Window1::wxWindow() (see module wxWindow), Window2::wxWindow() (see module wxWindow), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {sashPosition, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
unsplit(This::wxSplitterWindow()) -> bool()
.br
.RS
.LP
Equivalent to \fBunsplit(This, [])\fR\&\&.
.RE
.LP
.B
unsplit(This::wxSplitterWindow(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {toRemove, wxWindow() (see module wxWindow)}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
updateSize(This::wxSplitterWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxSplitterWindow()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>