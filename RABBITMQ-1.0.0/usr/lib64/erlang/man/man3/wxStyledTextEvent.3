.TH wxStyledTextEvent 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxStyledTextEvent \- See external documentation: wxStyledTextEvent.
.SH DESCRIPTION
.LP
See external documentation: wxStyledTextEvent\&.
.RS 2
.TP 2
.B
Use \fBwxEvtHandler:connect/3\fR\& with EventType::
\fIstc_change\fR\&, \fIstc_styleneeded\fR\&, \fIstc_charadded\fR\&, \fIstc_savepointreached\fR\&, \fIstc_savepointleft\fR\&, \fIstc_romodifyattempt\fR\&, \fIstc_key\fR\&, \fIstc_doubleclick\fR\&, \fIstc_updateui\fR\&, \fIstc_modified\fR\&, \fIstc_macrorecord\fR\&, \fIstc_marginclick\fR\&, \fIstc_needshown\fR\&, \fIstc_painted\fR\&, \fIstc_userlistselection\fR\&, \fIstc_uridropped\fR\&, \fIstc_dwellstart\fR\&, \fIstc_dwellend\fR\&, \fIstc_start_drag\fR\&, \fIstc_drag_over\fR\&, \fIstc_do_drop\fR\&, \fIstc_zoom\fR\&, \fIstc_hotspot_click\fR\&, \fIstc_hotspot_dclick\fR\&, \fIstc_calltip_click\fR\&, \fIstc_autocomp_selection\fR\&
.RE
.LP
See also the message variant \fB#wxStyledText{\fR\&} event record type\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxCommandEvent\fR\& 
.br
\fBwxEvent\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxStyledTextEvent()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
getPosition(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getKey(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getModifiers(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getModificationType(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getText(This::wxStyledTextEvent()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLength(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLinesAdded(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLine(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFoldLevelNow(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFoldLevelPrev(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMargin(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMessage(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWParam(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLParam(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getListType(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getX(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getY(This::wxStyledTextEvent()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDragText(This::wxStyledTextEvent()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDragAllowMove(This::wxStyledTextEvent()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDragResult(This::wxStyledTextEvent()) -> WxDragResult
.br
.RS
.TP 3
Types:

WxDragResult = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxDragResult is one of ?wxDragError | ?wxDragNone | ?wxDragCopy | ?wxDragMove | ?wxDragLink | ?wxDragCancel
.RE
.LP
.B
getShift(This::wxStyledTextEvent()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getControl(This::wxStyledTextEvent()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getAlt(This::wxStyledTextEvent()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.SH AUTHORS
.LP

.I
<>