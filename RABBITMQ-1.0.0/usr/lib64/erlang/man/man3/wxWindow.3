.TH wxWindow 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxWindow \- See external documentation: wxWindow.
.SH DESCRIPTION
.LP
See external documentation: wxWindow\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxWindow()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxWindow()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent::wxWindow(), Id::integer()) -> wxWindow()
.br
.RS
.LP
Equivalent to \fBnew(Parent, Id, [])\fR\&\&.
.RE
.LP
.B
new(Parent::wxWindow(), Id::integer(), Options::[Option]) -> wxWindow()
.br
.RS
.TP 3
Types:

Option = {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cacheBestSize(This::wxWindow(), Size::{W::integer(), H::integer()}) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
captureMouse(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
center(This::wxWindow()) -> ok
.br
.RS
.LP
Equivalent to \fBcenter(This, [])\fR\&\&.
.RE
.LP
.B
center(This::wxWindow(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {dir, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
centerOnParent(This::wxWindow()) -> ok
.br
.RS
.LP
Equivalent to \fBcenterOnParent(This, [])\fR\&\&.
.RE
.LP
.B
centerOnParent(This::wxWindow(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {dir, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
centre(This::wxWindow()) -> ok
.br
.RS
.LP
Equivalent to \fBcentre(This, [])\fR\&\&.
.RE
.LP
.B
centre(This::wxWindow(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {dir, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
centreOnParent(This::wxWindow()) -> ok
.br
.RS
.LP
Equivalent to \fBcentreOnParent(This, [])\fR\&\&.
.RE
.LP
.B
centreOnParent(This::wxWindow(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {dir, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clearBackground(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clientToScreen(This::wxWindow(), Pt::{X::integer(), Y::integer()}) -> {X::integer(), Y::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clientToScreen(This::wxWindow(), X::integer(), Y::integer()) -> {X::integer(), Y::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
close(This::wxWindow()) -> bool()
.br
.RS
.LP
Equivalent to \fBclose(This, [])\fR\&\&.
.RE
.LP
.B
close(This::wxWindow(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {force, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
convertDialogToPixels(This::wxWindow(), Sz::{W::integer(), H::integer()}) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
convertPixelsToDialog(This::wxWindow(), Sz::{W::integer(), H::integer()}) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
Destroy(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroyChildren(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
disable(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
enable(This::wxWindow()) -> bool()
.br
.RS
.LP
Equivalent to \fBenable(This, [])\fR\&\&.
.RE
.LP
.B
enable(This::wxWindow(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {enable, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findFocus() -> wxWindow()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findWindow(This::wxWindow(), X::integer() | string()) -> wxWindow()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI findWindow(This::wxWindow(), Winid::integer()) -> wxWindow() \fR\& 
.LP
\fI findWindow(This::wxWindow(), Name::string()) -> wxWindow() \fR\& 
.RE
.LP
.B
findWindowById(Winid::integer()) -> wxWindow()
.br
.RS
.LP
Equivalent to \fBfindWindowById(Winid, [])\fR\&\&.
.RE
.LP
.B
findWindowById(Winid::integer(), Options::[Option]) -> wxWindow()
.br
.RS
.TP 3
Types:

Option = {parent, wxWindow()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findWindowByName(Name::string()) -> wxWindow()
.br
.RS
.LP
Equivalent to \fBfindWindowByName(Name, [])\fR\&\&.
.RE
.LP
.B
findWindowByName(Name::string(), Options::[Option]) -> wxWindow()
.br
.RS
.TP 3
Types:

Option = {parent, wxWindow()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findWindowByLabel(Label::string()) -> wxWindow()
.br
.RS
.LP
Equivalent to \fBfindWindowByLabel(Label, [])\fR\&\&.
.RE
.LP
.B
findWindowByLabel(Label::string(), Options::[Option]) -> wxWindow()
.br
.RS
.TP 3
Types:

Option = {parent, wxWindow()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
fit(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
fitInside(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
freeze(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getAcceleratorTable(This::wxWindow()) -> wxAcceleratorTable() (see module wxAcceleratorTable)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getBackgroundColour(This::wxWindow()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getBackgroundStyle(This::wxWindow()) -> WxBackgroundStyle
.br
.RS
.TP 3
Types:

WxBackgroundStyle = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxBackgroundStyle is one of ?wxBG_STYLE_SYSTEM | ?wxBG_STYLE_COLOUR | ?wxBG_STYLE_CUSTOM
.RE
.LP
.B
getBestSize(This::wxWindow()) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCaret(This::wxWindow()) -> wxCaret() (see module wxCaret)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCapture() -> wxWindow()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCharHeight(This::wxWindow()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCharWidth(This::wxWindow()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getChildren(This::wxWindow()) -> [wxWindow()]
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getClientSize(This::wxWindow()) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getContainingSizer(This::wxWindow()) -> wxSizer() (see module wxSizer)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCursor(This::wxWindow()) -> wxCursor() (see module wxCursor)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDropTarget(This::wxWindow()) -> wxDropTarget() (see module wxDropTarget)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEventHandler(This::wxWindow()) -> wxEvtHandler() (see module wxEvtHandler)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getExtraStyle(This::wxWindow()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFont(This::wxWindow()) -> wxFont() (see module wxFont)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getForegroundColour(This::wxWindow()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getGrandParent(This::wxWindow()) -> wxWindow()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getHandle(This::wxWindow()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getHelpText(This::wxWindow()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getId(This::wxWindow()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getLabel(This::wxWindow()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMaxSize(This::wxWindow()) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMinSize(This::wxWindow()) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getName(This::wxWindow()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getParent(This::wxWindow()) -> wxWindow()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPosition(This::wxWindow()) -> {X::integer(), Y::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getRect(This::wxWindow()) -> {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getScreenPosition(This::wxWindow()) -> {X::integer(), Y::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getScreenRect(This::wxWindow()) -> {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getScrollPos(This::wxWindow(), Orient::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getScrollRange(This::wxWindow(), Orient::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getScrollThumb(This::wxWindow(), Orient::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSize(This::wxWindow()) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSizer(This::wxWindow()) -> wxSizer() (see module wxSizer)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTextExtent(This::wxWindow(), String::string()) -> {X::integer(), Y::integer(), Descent::integer(), ExternalLeading::integer()}
.br
.RS
.LP
Equivalent to \fBgetTextExtent(This, String, [])\fR\&\&.
.RE
.LP
.B
getTextExtent(This::wxWindow(), String::string(), Options::[Option]) -> {X::integer(), Y::integer(), Descent::integer(), ExternalLeading::integer()}
.br
.RS
.TP 3
Types:

Option = {theFont, wxFont() (see module wxFont)}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getToolTip(This::wxWindow()) -> wxToolTip() (see module wxToolTip)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getUpdateRegion(This::wxWindow()) -> wxRegion() (see module wxRegion)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getVirtualSize(This::wxWindow()) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWindowStyleFlag(This::wxWindow()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getWindowVariant(This::wxWindow()) -> WxWindowVariant
.br
.RS
.TP 3
Types:

WxWindowVariant = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxWindowVariant is one of ?wxWINDOW_VARIANT_NORMAL | ?wxWINDOW_VARIANT_SMALL | ?wxWINDOW_VARIANT_MINI | ?wxWINDOW_VARIANT_LARGE | ?wxWINDOW_VARIANT_MAX
.RE
.LP
.B
hasCapture(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasScrollbar(This::wxWindow(), Orient::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hasTransparentBackground(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hide(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
inheritAttributes(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
initDialog(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
invalidateBestSize(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isEnabled(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isExposed(This::wxWindow(), X::term()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI isExposed(This::wxWindow(), Pt::{X::integer(),Y::integer()}) -> bool() \fR\& 
.LP
\fI isExposed(This::wxWindow(), Rect::{X::integer(),Y::integer(),W::integer(),H::integer()}) -> bool() \fR\& 
.RE
.LP
.B
isExposed(This::wxWindow(), X::integer(), Y::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isExposed(This::wxWindow(), X::integer(), Y::integer(), W::integer(), H::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isRetained(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isShown(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isTopLevel(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
layout(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineDown(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lineUp(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lower(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
makeModal(This::wxWindow()) -> ok
.br
.RS
.LP
Equivalent to \fBmakeModal(This, [])\fR\&\&.
.RE
.LP
.B
makeModal(This::wxWindow(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {modal, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
move(This::wxWindow(), Pt::{X::integer(), Y::integer()}) -> ok
.br
.RS
.LP
Equivalent to \fBmove(This, Pt, [])\fR\&\&.
.RE
.LP
.B
move(This::wxWindow(), X::integer() | term(), X::integer() | term()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI move(This::wxWindow(), X::integer(), Y::integer()) -> move(This,X,Y, []) \fR\&
.LP
\fI move(This::wxWindow(), Pt::{X::integer(),Y::integer()}, [Option]) -> ok \fR\& 
.br
Option = {flags, integer()}
.RE
.LP
.B
move(This::wxWindow(), X::integer(), Y::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {flags, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveAfterInTabOrder(This::wxWindow(), Win::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
moveBeforeInTabOrder(This::wxWindow(), Win::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
navigate(This::wxWindow()) -> bool()
.br
.RS
.LP
Equivalent to \fBnavigate(This, [])\fR\&\&.
.RE
.LP
.B
navigate(This::wxWindow(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {flags, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pageDown(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pageUp(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
popEventHandler(This::wxWindow()) -> wxEvtHandler() (see module wxEvtHandler)
.br
.RS
.LP
Equivalent to \fBpopEventHandler(This, [])\fR\&\&.
.RE
.LP
.B
popEventHandler(This::wxWindow(), Options::[Option]) -> wxEvtHandler() (see module wxEvtHandler)
.br
.RS
.TP 3
Types:

Option = {deleteHandler, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
popupMenu(This::wxWindow(), Menu::wxMenu() (see module wxMenu)) -> bool()
.br
.RS
.LP
Equivalent to \fBpopupMenu(This, Menu, [])\fR\&\&.
.RE
.LP
.B
popupMenu(This::wxWindow(), Menu::wxMenu() (see module wxMenu), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {pos, {X::integer(), Y::integer()}}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
popupMenu(This::wxWindow(), Menu::wxMenu() (see module wxMenu), X::integer(), Y::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
raise(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
refresh(This::wxWindow()) -> ok
.br
.RS
.LP
Equivalent to \fBrefresh(This, [])\fR\&\&.
.RE
.LP
.B
refresh(This::wxWindow(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {eraseBackground, bool()} | {rect, {X::integer(), Y::integer(), W::integer(), H::integer()}}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
refreshRect(This::wxWindow(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}) -> ok
.br
.RS
.LP
Equivalent to \fBrefreshRect(This, Rect, [])\fR\&\&.
.RE
.LP
.B
refreshRect(This::wxWindow(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}, Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {eraseBackground, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
releaseMouse(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
removeChild(This::wxWindow(), Child::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
reparent(This::wxWindow(), NewParent::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
screenToClient(This::wxWindow()) -> {X::integer(), Y::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
screenToClient(This::wxWindow(), Pt::{X::integer(), Y::integer()}) -> {X::integer(), Y::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scrollLines(This::wxWindow(), Lines::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scrollPages(This::wxWindow(), Pages::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scrollWindow(This::wxWindow(), Dx::integer(), Dy::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBscrollWindow(This, Dx, Dy, [])\fR\&\&.
.RE
.LP
.B
scrollWindow(This::wxWindow(), Dx::integer(), Dy::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {rect, {X::integer(), Y::integer(), W::integer(), H::integer()}}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setAcceleratorTable(This::wxWindow(), Accel::wxAcceleratorTable() (see module wxAcceleratorTable)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setAutoLayout(This::wxWindow(), AutoLayout::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setBackgroundColour(This::wxWindow(), Colour::colour() (see module wx)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setBackgroundStyle(This::wxWindow(), Style::WxBackgroundStyle) -> bool()
.br
.RS
.TP 3
Types:

WxBackgroundStyle = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxBackgroundStyle is one of ?wxBG_STYLE_SYSTEM | ?wxBG_STYLE_COLOUR | ?wxBG_STYLE_CUSTOM
.RE
.LP
.B
setCaret(This::wxWindow(), Caret::wxCaret() (see module wxCaret)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setClientSize(This::wxWindow(), X::term()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setClientSize(This::wxWindow(), Size::{W::integer(), H::integer()}) -> ok \fR\& 
.LP
\fI setClientSize(This::wxWindow(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}) -> ok \fR\& 
.RE
.LP
.B
setClientSize(This::wxWindow(), Width::integer(), Height::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setContainingSizer(This::wxWindow(), Sizer::wxSizer() (see module wxSizer)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setCursor(This::wxWindow(), Cursor::wxCursor() (see module wxCursor)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMaxSize(This::wxWindow(), MaxSize::{W::integer(), H::integer()}) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMinSize(This::wxWindow(), MinSize::{W::integer(), H::integer()}) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setOwnBackgroundColour(This::wxWindow(), Colour::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setOwnFont(This::wxWindow(), Font::wxFont() (see module wxFont)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setOwnForegroundColour(This::wxWindow(), Colour::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDropTarget(This::wxWindow(), DropTarget::wxDropTarget() (see module wxDropTarget)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setExtraStyle(This::wxWindow(), ExStyle::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFocus(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFocusFromKbd(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFont(This::wxWindow(), Font::wxFont() (see module wxFont)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setForegroundColour(This::wxWindow(), Colour::colour() (see module wx)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setHelpText(This::wxWindow(), Text::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setId(This::wxWindow(), Winid::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setLabel(This::wxWindow(), Label::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setName(This::wxWindow(), Name::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setPalette(This::wxWindow(), Pal::wxPalette() (see module wxPalette)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setScrollbar(This::wxWindow(), Orient::integer(), Pos::integer(), ThumbVisible::integer(), Range::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBsetScrollbar(This, Orient, Pos, ThumbVisible, Range, [])\fR\&\&.
.RE
.LP
.B
setScrollbar(This::wxWindow(), Orient::integer(), Pos::integer(), ThumbVisible::integer(), Range::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {refresh, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setScrollPos(This::wxWindow(), Orient::integer(), Pos::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBsetScrollPos(This, Orient, Pos, [])\fR\&\&.
.RE
.LP
.B
setScrollPos(This::wxWindow(), Orient::integer(), Pos::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {refresh, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSize(This::wxWindow(), X::term()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setSize(This::wxWindow(), Rect::{X::integer(),Y::integer(),W::integer(),H::integer()}) -> setSize(This,Rect, []) \fR\&
.LP
\fI setSize(This::wxWindow(), Size::{W::integer(),H::integer()}) -> ok \fR\& 
.RE
.LP
.B
setSize(This::wxWindow(), X::integer() | term(), X::integer() | term()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setSize(This::wxWindow(), Width::integer(), Height::integer()) -> ok \fR\& 
.LP
\fI setSize(This::wxWindow(), Rect::{X::integer(),Y::integer(),W::integer(),H::integer()}, [Option]) -> ok \fR\& 
.br
Option = {sizeFlags, integer()}
.RE
.LP
.B
setSize(This::wxWindow(), X::integer(), Y::integer(), Width::integer(), Height::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBsetSize(This, X, Y, Width, Height, [])\fR\&\&.
.RE
.LP
.B
setSize(This::wxWindow(), X::integer(), Y::integer(), Width::integer(), Height::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {sizeFlags, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSizeHints(This::wxWindow(), MinSize::{W::integer(), H::integer()}) -> ok
.br
.RS
.LP
Equivalent to \fBsetSizeHints(This, MinSize, [])\fR\&\&.
.RE
.LP
.B
setSizeHints(This::wxWindow(), X::integer() | term(), X::integer() | term()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setSizeHints(This::wxWindow(), MinW::integer(), MinH::integer()) -> setSizeHints(This,MinW,MinH, []) \fR\&
.LP
\fI setSizeHints(This::wxWindow(), MinSize::{W::integer(),H::integer()}, [Option]) -> ok \fR\& 
.br
Option = {maxSize, {W::integer(),H::integer()}} | {incSize, {W::integer(),H::integer()}}
.RE
.LP
.B
setSizeHints(This::wxWindow(), MinW::integer(), MinH::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {maxW, integer()} | {maxH, integer()} | {incW, integer()} | {incH, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSizer(This::wxWindow(), Sizer::wxSizer() (see module wxSizer)) -> ok
.br
.RS
.LP
Equivalent to \fBsetSizer(This, Sizer, [])\fR\&\&.
.RE
.LP
.B
setSizer(This::wxWindow(), Sizer::wxSizer() (see module wxSizer), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {deleteOld, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSizerAndFit(This::wxWindow(), Sizer::wxSizer() (see module wxSizer)) -> ok
.br
.RS
.LP
Equivalent to \fBsetSizerAndFit(This, Sizer, [])\fR\&\&.
.RE
.LP
.B
setSizerAndFit(This::wxWindow(), Sizer::wxSizer() (see module wxSizer), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {deleteOld, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setThemeEnabled(This::wxWindow(), EnableTheme::bool()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setToolTip(This::wxWindow(), X::string() | term()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setToolTip(This::wxWindow(), Tip::string()) -> ok \fR\& 
.LP
\fI setToolTip(This::wxWindow(), Tip::wxToolTip:wxToolTip()) -> ok \fR\& 
.RE
.LP
.B
setVirtualSize(This::wxWindow(), Size::{W::integer(), H::integer()}) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setVirtualSize(This::wxWindow(), X::integer(), Y::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setVirtualSizeHints(This::wxWindow(), MinSize::{W::integer(), H::integer()}) -> ok
.br
.RS
.LP
Equivalent to \fBsetVirtualSizeHints(This, MinSize, [])\fR\&\&.
.RE
.LP
.B
setVirtualSizeHints(This::wxWindow(), X::integer() | term(), X::integer() | term()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setVirtualSizeHints(This::wxWindow(), MinW::integer(), MinH::integer()) -> setVirtualSizeHints(This,MinW,MinH, []) \fR\&
.LP
\fI setVirtualSizeHints(This::wxWindow(), MinSize::{W::integer(),H::integer()}, [Option]) -> ok \fR\& 
.br
Option = {maxSize, {W::integer(),H::integer()}}
.RE
.LP
.B
setVirtualSizeHints(This::wxWindow(), MinW::integer(), MinH::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {maxW, integer()} | {maxH, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWindowStyle(This::wxWindow(), Style::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWindowStyleFlag(This::wxWindow(), Style::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWindowVariant(This::wxWindow(), Variant::WxWindowVariant) -> ok
.br
.RS
.TP 3
Types:

WxWindowVariant = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxWindowVariant is one of ?wxWINDOW_VARIANT_NORMAL | ?wxWINDOW_VARIANT_SMALL | ?wxWINDOW_VARIANT_MINI | ?wxWINDOW_VARIANT_LARGE | ?wxWINDOW_VARIANT_MAX
.RE
.LP
.B
shouldInheritColours(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
show(This::wxWindow()) -> bool()
.br
.RS
.LP
Equivalent to \fBshow(This, [])\fR\&\&.
.RE
.LP
.B
show(This::wxWindow(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {show, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
thaw(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
transferDataFromWindow(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
transferDataToWindow(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
update(This::wxWindow()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
updateWindowUI(This::wxWindow()) -> ok
.br
.RS
.LP
Equivalent to \fBupdateWindowUI(This, [])\fR\&\&.
.RE
.LP
.B
updateWindowUI(This::wxWindow(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {flags, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
validate(This::wxWindow()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
warpPointer(This::wxWindow(), X::integer(), Y::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxWindow()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>