.TH glu 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
glu \-  A part of the standard OpenGL Utility api.
.SH DESCRIPTION
.LP
A part of the standard OpenGL Utility api\&. See www\&.opengl\&.org
.LP
Booleans are represented by integers 0 and 1\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIclamp()\fR\&:

.RS 2
.LP
A float clamped between 0\&.0 - 1\&.0
.RE
.TP 2
.B
\fIenum()\fR\&:

.RS 2
.LP
An integer defined in gl\&.hrl
.RE
.TP 2
.B
\fImem()\fR\&:

.RS 2
.LP
memory block
.RE
.TP 2
.B
\fIoffset()\fR\&:

.RS 2
.LP
An integer which is an offset in an array
.RE
.RE
.SH EXPORTS
.LP
.B
tesselate(X1::Vec3, Vs::[Vec3]) -> {Triangles, VertexPos}
.br
.RS
.TP 3
Types:

Vec3 = {float(), float(), float()}
.br
Triangles = [VertexIndex::integer()]
.br
VertexPos = binary()
.br
.RE
.RS
.LP
General purpose polygon triangulation\&. The first argument is the normal and the second a list of vertex positions\&. Returned is a list of indecies of the vertices and a binary (64bit native float) containing an array of vertex positions, it starts with the vertices in Vs and may contain newly created vertices in the end\&.
.RE
.LP
.B
build1DMipmapLevels(Target::enum(), InternalFormat::integer(), Width::integer(), Format::enum(), Type::enum(), Level::integer(), Base::integer(), Max::integer(), Data::binary()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
build1DMipmaps(Target::enum(), InternalFormat::integer(), Width::integer(), Format::enum(), Type::enum(), Data::binary()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
build2DMipmapLevels(Target::enum(), InternalFormat::integer(), Width::integer(), Height::integer(), Format::enum(), Type::enum(), Level::integer(), Base::integer(), Max::integer(), Data::binary()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
build2DMipmaps(Target::enum(), InternalFormat::integer(), Width::integer(), Height::integer(), Format::enum(), Type::enum(), Data::binary()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
build3DMipmapLevels(Target::enum(), InternalFormat::integer(), Width::integer(), Height::integer(), Depth::integer(), Format::enum(), Type::enum(), Level::integer(), Base::integer(), Max::integer(), Data::binary()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
build3DMipmaps(Target::enum(), InternalFormat::integer(), Width::integer(), Height::integer(), Depth::integer(), Format::enum(), Type::enum(), Data::binary()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
checkExtension(ExtName::string(), ExtString::string()) -> 0 | 1
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
cylinder(Quad::integer(), Base::float(), Top::float(), Height::float(), Slices::integer(), Stacks::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteQuadric(Quad::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
disk(Quad::integer(), Inner::float(), Outer::float(), Slices::integer(), Loops::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
errorString(Error::enum()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getString(Name::enum()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
lookAt(EyeX::float(), EyeY::float(), EyeZ::float(), CenterX::float(), CenterY::float(), CenterZ::float(), UpX::float(), UpY::float(), UpZ::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
newQuadric() -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
ortho2D(Left::float(), Right::float(), Bottom::float(), Top::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
partialDisk(Quad::integer(), Inner::float(), Outer::float(), Slices::integer(), Loops::integer(), Start::float(), Sweep::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
perspective(Fovy::float(), Aspect::float(), ZNear::float(), ZFar::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pickMatrix(X::float(), Y::float(), DelX::float(), DelY::float(), Viewport::{integer(), integer(), integer(), integer()}) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
project(ObjX::float(), ObjY::float(), ObjZ::float(), Model::{float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float()}, Proj::{float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float()}, View::{integer(), integer(), integer(), integer()}) -> {integer(), WinX::float(), WinY::float(), WinZ::float()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
quadricDrawStyle(Quad::integer(), Draw::enum()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
quadricNormals(Quad::integer(), Normal::enum()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
quadricOrientation(Quad::integer(), Orientation::enum()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
quadricTexture(Quad::integer(), Texture::0 | 1) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scaleImage(Format::enum(), WIn::integer(), HIn::integer(), TypeIn::enum(), DataIn::binary(), WOut::integer(), HOut::integer(), TypeOut::enum(), DataOut::mem()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
sphere(Quad::integer(), Radius::float(), Slices::integer(), Stacks::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
unProject(WinX::float(), WinY::float(), WinZ::float(), Model::{float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float()}, Proj::{float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float()}, View::{integer(), integer(), integer(), integer()}) -> {integer(), ObjX::float(), ObjY::float(), ObjZ::float()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
unProject4(WinX::float(), WinY::float(), WinZ::float(), ClipW::float(), Model::{float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float()}, Proj::{float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float(), float()}, View::{integer(), integer(), integer(), integer()}, NearVal::float(), FarVal::float()) -> {integer(), ObjX::float(), ObjY::float(), ObjZ::float(), ObjW::float()}
.br
.RS
.LP
See external documentation\&.
.RE
.SH AUTHORS
.LP

.I
<>