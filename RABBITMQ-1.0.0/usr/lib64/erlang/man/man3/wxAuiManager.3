.TH wxAuiManager 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxAuiManager \- See external documentation: wxAuiManager.
.SH DESCRIPTION
.LP
See external documentation: wxAuiManager\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxAuiManager()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxAuiManager()
.br
.RS
.LP
Equivalent to \fBnew([])\fR\&\&.
.RE
.LP
.B
new(Options::[Option]) -> wxAuiManager()
.br
.RS
.TP 3
Types:

Option = {managed_wnd, wxWindow() (see module wxWindow)} | {flags, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addPane(This::wxAuiManager(), Window::wxWindow() (see module wxWindow)) -> bool()
.br
.RS
.LP
Equivalent to \fBaddPane(This, Window, [])\fR\&\&.
.RE
.LP
.B
addPane(This::wxAuiManager(), Window::wxWindow() (see module wxWindow), X::term()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI addPane(This::wxAuiManager(), Window::wxWindow:wxWindow(), [Option]) -> bool() \fR\& 
.br
Option = {direction, integer()} | {caption, string()}
.LP
\fI addPane(This::wxAuiManager(), Window::wxWindow:wxWindow(), Pane_info::wxAuiPaneInfo:wxAuiPaneInfo()) -> bool() \fR\& 
.RE
.LP
.B
addPane(This::wxAuiManager(), Window::wxWindow() (see module wxWindow), Pane_info::wxAuiPaneInfo() (see module wxAuiPaneInfo), Drop_pos::{X::integer(), Y::integer()}) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
detachPane(This::wxAuiManager(), Window::wxWindow() (see module wxWindow)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getAllPanes(This::wxAuiManager()) -> wxAuiPaneInfoArray() (see module wxAuiPaneInfoArray)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getArtProvider(This::wxAuiManager()) -> wxAuiDockArt() (see module wxAuiDockArt)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getDockSizeConstraint(This::wxAuiManager()) -> {Width_pct::float(), Height_pct::float()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFlags(This::wxAuiManager()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getManagedWindow(This::wxAuiManager()) -> wxWindow() (see module wxWindow)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getManager(Window::wxWindow() (see module wxWindow)) -> wxAuiManager()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPane(This::wxAuiManager(), X::string() | term()) -> wxAuiPaneInfo() (see module wxAuiPaneInfo)
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI getPane(This::wxAuiManager(), Name::string()) -> wxAuiPaneInfo:wxAuiPaneInfo() \fR\& 
.LP
\fI getPane(This::wxAuiManager(), Window::wxWindow:wxWindow()) -> wxAuiPaneInfo:wxAuiPaneInfo() \fR\& 
.RE
.LP
.B
hideHint(This::wxAuiManager()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertPane(This::wxAuiManager(), Window::wxWindow() (see module wxWindow), Insert_location::wxAuiPaneInfo() (see module wxAuiPaneInfo)) -> bool()
.br
.RS
.LP
Equivalent to \fBinsertPane(This, Window, Insert_location, [])\fR\&\&.
.RE
.LP
.B
insertPane(This::wxAuiManager(), Window::wxWindow() (see module wxWindow), Insert_location::wxAuiPaneInfo() (see module wxAuiPaneInfo), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {insert_level, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadPaneInfo(This::wxAuiManager(), Pane_part::string(), Pane::wxAuiPaneInfo() (see module wxAuiPaneInfo)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
loadPerspective(This::wxAuiManager(), Perspective::string()) -> bool()
.br
.RS
.LP
Equivalent to \fBloadPerspective(This, Perspective, [])\fR\&\&.
.RE
.LP
.B
loadPerspective(This::wxAuiManager(), Perspective::string(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {update, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
savePaneInfo(This::wxAuiManager(), Pane::wxAuiPaneInfo() (see module wxAuiPaneInfo)) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
savePerspective(This::wxAuiManager()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setArtProvider(This::wxAuiManager(), Art_provider::wxAuiDockArt() (see module wxAuiDockArt)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDockSizeConstraint(This::wxAuiManager(), Width_pct::float(), Height_pct::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFlags(This::wxAuiManager(), Flags::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setManagedWindow(This::wxAuiManager(), Managed_wnd::wxWindow() (see module wxWindow)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
showHint(This::wxAuiManager(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
unInit(This::wxAuiManager()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
update(This::wxAuiManager()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxAuiManager()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>