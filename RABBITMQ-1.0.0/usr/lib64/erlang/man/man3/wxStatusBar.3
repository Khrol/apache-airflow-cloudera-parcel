.TH wxStatusBar 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxStatusBar \- See external documentation: wxStatusBar.
.SH DESCRIPTION
.LP
See external documentation: wxStatusBar\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxStatusBar()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxStatusBar()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow)) -> wxStatusBar()
.br
.RS
.LP
Equivalent to \fBnew(Parent, [])\fR\&\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow), Options::[Option]) -> wxStatusBar()
.br
.RS
.TP 3
Types:

Option = {winid, integer()} | {style, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This::wxStatusBar(), Parent::wxWindow() (see module wxWindow)) -> bool()
.br
.RS
.LP
Equivalent to \fBcreate(This, Parent, [])\fR\&\&.
.RE
.LP
.B
create(This::wxStatusBar(), Parent::wxWindow() (see module wxWindow), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {winid, integer()} | {style, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFieldRect(This::wxStatusBar(), I::integer(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getFieldsCount(This::wxStatusBar()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getStatusText(This::wxStatusBar()) -> string()
.br
.RS
.LP
Equivalent to \fBgetStatusText(This, [])\fR\&\&.
.RE
.LP
.B
getStatusText(This::wxStatusBar(), Options::[Option]) -> string()
.br
.RS
.TP 3
Types:

Option = {number, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
popStatusText(This::wxStatusBar()) -> ok
.br
.RS
.LP
Equivalent to \fBpopStatusText(This, [])\fR\&\&.
.RE
.LP
.B
popStatusText(This::wxStatusBar(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {number, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
pushStatusText(This::wxStatusBar(), Text::string()) -> ok
.br
.RS
.LP
Equivalent to \fBpushStatusText(This, Text, [])\fR\&\&.
.RE
.LP
.B
pushStatusText(This::wxStatusBar(), Text::string(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {number, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFieldsCount(This::wxStatusBar(), Number::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBsetFieldsCount(This, Number, [])\fR\&\&.
.RE
.LP
.B
setFieldsCount(This::wxStatusBar(), Number::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {widths, [integer()]}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMinHeight(This::wxStatusBar(), Height::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatusText(This::wxStatusBar(), Text::string()) -> ok
.br
.RS
.LP
Equivalent to \fBsetStatusText(This, Text, [])\fR\&\&.
.RE
.LP
.B
setStatusText(This::wxStatusBar(), Text::string(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {number, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatusWidths(This::wxStatusBar(), Widths_field::[integer()]) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setStatusStyles(This::wxStatusBar(), Styles::[integer()]) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxStatusBar()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>