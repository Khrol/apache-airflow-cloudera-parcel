.TH wxRegion 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxRegion \- See external documentation: wxRegion.
.SH DESCRIPTION
.LP
See external documentation: wxRegion\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxRegion()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxRegion()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(X::term()) -> wxRegion()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI new(Bmp::wxBitmap:wxBitmap()) -> wxRegion() \fR\& 
.LP
\fI new(Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}) -> wxRegion() \fR\& 
.RE
.LP
.B
new(TopLeft::{X::integer(), Y::integer()}, BottomRight::{X::integer(), Y::integer()}) -> wxRegion()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(X::integer(), Y::integer(), W::integer(), H::integer()) -> wxRegion()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clear(This::wxRegion()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
contains(This::wxRegion(), X::term()) -> WxRegionContain
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI contains(This::wxRegion(), Pt::{X::integer(),Y::integer()}) -> WxRegionContain \fR\& 
.br
WxRegionContain = integer() 
.br
WxRegionContain is one of ?wxOutRegion | ?wxPartRegion | ?wxInRegion
.LP
\fI contains(This::wxRegion(), Rect::{X::integer(),Y::integer(),W::integer(),H::integer()}) -> WxRegionContain \fR\& 
.br
WxRegionContain = integer() 
.br
WxRegionContain is one of ?wxOutRegion | ?wxPartRegion | ?wxInRegion
.RE
.LP
.B
contains(This::wxRegion(), X::integer(), Y::integer()) -> WxRegionContain
.br
.RS
.TP 3
Types:

WxRegionContain = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxRegionContain is one of ?wxOutRegion | ?wxPartRegion | ?wxInRegion
.RE
.LP
.B
contains(This::wxRegion(), X::integer(), Y::integer(), W::integer(), H::integer()) -> WxRegionContain
.br
.RS
.TP 3
Types:

WxRegionContain = integer()
.br
.RE
.RS
.LP
See external documentation\&. 
.br
WxRegionContain is one of ?wxOutRegion | ?wxPartRegion | ?wxInRegion
.RE
.LP
.B
convertToBitmap(This::wxRegion()) -> wxBitmap() (see module wxBitmap)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getBox(This::wxRegion()) -> {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
intersect(This::wxRegion(), X::wxRegion() | term()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI intersect(This::wxRegion(), Region::wxRegion()) -> bool() \fR\& 
.LP
\fI intersect(This::wxRegion(), Rect::{X::integer(),Y::integer(),W::integer(),H::integer()}) -> bool() \fR\& 
.RE
.LP
.B
intersect(This::wxRegion(), X::integer(), Y::integer(), W::integer(), H::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isEmpty(This::wxRegion()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
subtract(This::wxRegion(), X::wxRegion() | term()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI subtract(This::wxRegion(), Region::wxRegion()) -> bool() \fR\& 
.LP
\fI subtract(This::wxRegion(), Rect::{X::integer(),Y::integer(),W::integer(),H::integer()}) -> bool() \fR\& 
.RE
.LP
.B
subtract(This::wxRegion(), X::integer(), Y::integer(), W::integer(), H::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
offset(This::wxRegion(), Pt::{X::integer(), Y::integer()}) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
offset(This::wxRegion(), X::integer(), Y::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
union(This::wxRegion(), X::term()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI union(This::wxRegion(), Region::wxRegion() | wxBitmap:wxBitmap()) -> bool() \fR\& 
.LP
\fI union(This::wxRegion(), Rect::{X::integer(),Y::integer(),W::integer(),H::integer()}) -> bool() \fR\& 
.RE
.LP
.B
union(This::wxRegion(), Bmp::wxBitmap() (see module wxBitmap), Transp::colour() (see module wx)) -> bool()
.br
.RS
.LP
Equivalent to \fBunion(This, Bmp, Transp, [])\fR\&\&.
.RE
.LP
.B
union(This::wxRegion(), Bmp::wxBitmap() (see module wxBitmap), Transp::colour() (see module wx), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {tolerance, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
union(This::wxRegion(), X::integer(), Y::integer(), W::integer(), H::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
Xor(This::wxRegion(), X::wxRegion() | term()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI \&'Xor\&'(This::wxRegion(), Region::wxRegion()) -> bool() \fR\& 
.LP
\fI \&'Xor\&'(This::wxRegion(), Rect::{X::integer(),Y::integer(),W::integer(),H::integer()}) -> bool() \fR\& 
.RE
.LP
.B
Xor(This::wxRegion(), X::integer(), Y::integer(), W::integer(), H::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
destroy(This::wxRegion()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>