.TH wxSizer 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxSizer \- See external documentation: wxSizer.
.SH DESCRIPTION
.LP
See external documentation: wxSizer\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxSizer()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
add(This::wxSizer(), Window::wxWindow() (see module wxWindow) | wxSizer()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
Equivalent to \fBadd(This, Window, [])\fR\&\&.
.RE
.LP
.B
add(This::wxSizer(), X::integer() | term(), X::integer() | term()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI add(This::wxSizer(), Width::integer(), Height::integer()) -> add(This,Width,Height, []) \fR\&
.LP
\fI add(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer(), [Option]) -> wxSizerItem:wxSizerItem() \fR\& 
.br
Option = {proportion, integer()} | {flag, integer()} | {border, integer()} | {userData, wx:wx()}
.LP
\fI add(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer(), Flags::wxSizerFlags:wxSizerFlags()) -> wxSizerItem:wxSizerItem() \fR\& 
.RE
.LP
.B
add(This::wxSizer(), Width::integer(), Height::integer(), Options::[Option]) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.TP 3
Types:

Option = {proportion, integer()} | {flag, integer()} | {border, integer()} | {userData, wx() (see module wx)}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addSpacer(This::wxSizer(), Size::integer()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
addStretchSpacer(This::wxSizer()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
Equivalent to \fBaddStretchSpacer(This, [])\fR\&\&.
.RE
.LP
.B
addStretchSpacer(This::wxSizer(), Options::[Option]) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.TP 3
Types:

Option = {prop, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
calcMin(This::wxSizer()) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clear(This::wxSizer()) -> ok
.br
.RS
.LP
Equivalent to \fBclear(This, [])\fR\&\&.
.RE
.LP
.B
clear(This::wxSizer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {delete_windows, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
detach(This::wxSizer(), X::integer() | term()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI detach(This::wxSizer(), Index::integer()) -> bool() \fR\& 
.LP
\fI detach(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer()) -> bool() \fR\& 
.RE
.LP
.B
fit(This::wxSizer(), Window::wxWindow() (see module wxWindow)) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
fitInside(This::wxSizer(), Window::wxWindow() (see module wxWindow)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getChildren(This::wxSizer()) -> [wxSizerItem() (see module wxSizerItem)]
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItem(This::wxSizer(), X::term() | integer()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI getItem(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer()) -> getItem(This,Window, []) \fR\&
.LP
\fI getItem(This::wxSizer(), Index::integer()) -> wxSizerItem:wxSizerItem() \fR\& 
.RE
.LP
.B
getItem(This::wxSizer(), Window::wxWindow() (see module wxWindow) | wxSizer(), Options::[Option]) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.TP 3
Types:

Option = {recursive, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSize(This::wxSizer()) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPosition(This::wxSizer()) -> {X::integer(), Y::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getMinSize(This::wxSizer()) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hide(This::wxSizer(), X::term() | integer()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI hide(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer()) -> hide(This,Window, []) \fR\&
.LP
\fI hide(This::wxSizer(), Index::integer()) -> bool() \fR\& 
.RE
.LP
.B
hide(This::wxSizer(), Window::wxWindow() (see module wxWindow) | wxSizer(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {recursive, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insert(This::wxSizer(), Index::integer(), Item::wxSizerItem() (see module wxSizerItem)) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insert(This::wxSizer(), Index::integer(), X::integer() | term(), X::integer() | term()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI insert(This::wxSizer(), Index::integer(), Width::integer(), Height::integer()) -> insert(This,Index,Width,Height, []) \fR\&
.LP
\fI insert(This::wxSizer(), Index::integer(), Window::wxWindow:wxWindow() | wxSizer(), [Option]) -> wxSizerItem:wxSizerItem() \fR\& 
.br
Option = {proportion, integer()} | {flag, integer()} | {border, integer()} | {userData, wx:wx()}
.LP
\fI insert(This::wxSizer(), Index::integer(), Window::wxWindow:wxWindow() | wxSizer(), Flags::wxSizerFlags:wxSizerFlags()) -> wxSizerItem:wxSizerItem() \fR\& 
.RE
.LP
.B
insert(This::wxSizer(), Index::integer(), Width::integer(), Height::integer(), Options::[Option]) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.TP 3
Types:

Option = {proportion, integer()} | {flag, integer()} | {border, integer()} | {userData, wx() (see module wx)}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertSpacer(This::wxSizer(), Index::integer(), Size::integer()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertStretchSpacer(This::wxSizer(), Index::integer()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
Equivalent to \fBinsertStretchSpacer(This, Index, [])\fR\&\&.
.RE
.LP
.B
insertStretchSpacer(This::wxSizer(), Index::integer(), Options::[Option]) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.TP 3
Types:

Option = {prop, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
isShown(This::wxSizer(), X::integer() | term()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI isShown(This::wxSizer(), Index::integer()) -> bool() \fR\& 
.LP
\fI isShown(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer()) -> bool() \fR\& 
.RE
.LP
.B
layout(This::wxSizer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
prepend(This::wxSizer(), Item::wxSizerItem() (see module wxSizerItem)) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
prepend(This::wxSizer(), X::integer() | term(), X::integer() | term()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI prepend(This::wxSizer(), Width::integer(), Height::integer()) -> prepend(This,Width,Height, []) \fR\&
.LP
\fI prepend(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer(), [Option]) -> wxSizerItem:wxSizerItem() \fR\& 
.br
Option = {proportion, integer()} | {flag, integer()} | {border, integer()} | {userData, wx:wx()}
.LP
\fI prepend(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer(), Flags::wxSizerFlags:wxSizerFlags()) -> wxSizerItem:wxSizerItem() \fR\& 
.RE
.LP
.B
prepend(This::wxSizer(), Width::integer(), Height::integer(), Options::[Option]) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.TP 3
Types:

Option = {proportion, integer()} | {flag, integer()} | {border, integer()} | {userData, wx() (see module wx)}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
prependSpacer(This::wxSizer(), Size::integer()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
prependStretchSpacer(This::wxSizer()) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.LP
Equivalent to \fBprependStretchSpacer(This, [])\fR\&\&.
.RE
.LP
.B
prependStretchSpacer(This::wxSizer(), Options::[Option]) -> wxSizerItem() (see module wxSizerItem)
.br
.RS
.TP 3
Types:

Option = {prop, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
recalcSizes(This::wxSizer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
remove(This::wxSizer(), X::integer() | wxSizer()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI remove(This::wxSizer(), Index::integer()) -> bool() \fR\& 
.LP
\fI remove(This::wxSizer(), Sizer::wxSizer()) -> bool() \fR\& 
.RE
.LP
.B
replace(This::wxSizer(), X::term() | integer(), X::term()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI replace(This::wxSizer(), Oldwin::wxWindow:wxWindow() | wxSizer(), Newwin::wxWindow:wxWindow() | wxSizer()) -> replace(This,Oldwin,Newwin, []) \fR\&
.LP
\fI replace(This::wxSizer(), Index::integer(), Newitem::wxSizerItem:wxSizerItem()) -> bool() \fR\& 
.RE
.LP
.B
replace(This::wxSizer(), Oldwin::wxWindow() (see module wxWindow) | wxSizer(), Newwin::wxWindow() (see module wxWindow) | wxSizer(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {recursive, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setDimension(This::wxSizer(), X::integer(), Y::integer(), Width::integer(), Height::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMinSize(This::wxSizer(), Size::{W::integer(), H::integer()}) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setMinSize(This::wxSizer(), Width::integer(), Height::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemMinSize(This::wxSizer(), X::integer() | term(), Size::{W::integer(), H::integer()}) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setItemMinSize(This::wxSizer(), Index::integer(), Size::{W::integer(),H::integer()}) -> bool() \fR\& 
.LP
\fI setItemMinSize(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer(), Size::{W::integer(),H::integer()}) -> bool() \fR\& 
.RE
.LP
.B
setItemMinSize(This::wxSizer(), X::integer() | term(), Width::integer(), Height::integer()) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI setItemMinSize(This::wxSizer(), Index::integer(), Width::integer(), Height::integer()) -> bool() \fR\& 
.LP
\fI setItemMinSize(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer(), Width::integer(), Height::integer()) -> bool() \fR\& 
.RE
.LP
.B
setSizeHints(This::wxSizer(), Window::wxWindow() (see module wxWindow)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setVirtualSizeHints(This::wxSizer(), Window::wxWindow() (see module wxWindow)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
show(This::wxSizer(), X::integer() | term() | bool()) -> bool() | bool() | ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI show(This::wxSizer(), Index::integer()) -> show(This,Index, []) \fR\&
.LP
\fI show(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer()) -> show(This,Window, []) \fR\&
.LP
\fI show(This::wxSizer(), Show::bool()) -> ok \fR\& 
.RE
.LP
.B
show(This::wxSizer(), X::integer() | term(), Options::[Option]) -> bool()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI show(This::wxSizer(), Index::integer(), [Option]) -> bool() \fR\& 
.br
Option = {show, bool()}
.LP
\fI show(This::wxSizer(), Window::wxWindow:wxWindow() | wxSizer(), [Option]) -> bool() \fR\& 
.br
Option = {show, bool()} | {recursive, bool()}
.RE
.SH AUTHORS
.LP

.I
<>