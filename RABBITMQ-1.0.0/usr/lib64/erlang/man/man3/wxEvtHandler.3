.TH wxEvtHandler 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxEvtHandler \- The Event handler.
.SH DESCRIPTION
.LP
The Event handler\&.
.LP
To get events from wxwidgets objects you subscribe to them by calling connect/[2-3]\&. Events are sent as messages, if no callback was supplied These messages will be \fB#wx{\fR\&} where EventRecord is a record that depends on the \fBevent type\fR\&\&. The records are defined in: wx/include/wx\&.hrl\&.
.LP
If a callback was supplied to connect, the callback will be invoked (in another process) to handle the event\&. The callback should be of arity 2\&. fun(EventRecord::wx(), EventObject::wxObject())\&.
.LP
Beware that the callback will be in executed in new process each time\&.
.LP
 The orginal documentation\&.
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwx() = #wx{id=integer(), obj=wxObject() (see module wx), userData=term(), event=Rec}\fR\&:

.RS 2
.LP
Rec is a event record\&.
.RE
.TP 2
.B
\fIwxAuiManager() = #wxAuiManager{type=wxEventType(), manager=wxAuiManager() (see module wxAuiManager), pane=wxAuiPaneInfo() (see module wxAuiPaneInfo), button=integer(), veto_flag=bool(), canveto_flag=bool(), dc=wxDC() (see module wxDC)}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIaui_pane_button\fR\&, \fIaui_pane_close\fR\&, \fIaui_pane_maximize\fR\&, \fIaui_pane_restore\fR\&, \fIaui_render\fR\&, \fIaui_find_manager\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxAuiManagerEvent\fR\&
.RE
.TP 2
.B
\fIwxAuiNotebook() = #wxAuiNotebook{type=wxEventType(), old_selection=integer(), selection=integer(), drag_source=wxAuiNotebook() (see module wxAuiNotebook)}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_auinotebook_page_close\fR\&, \fIcommand_auinotebook_page_changed\fR\&, \fIcommand_auinotebook_page_changing\fR\&, \fIcommand_auinotebook_button\fR\&, \fIcommand_auinotebook_begin_drag\fR\&, \fIcommand_auinotebook_end_drag\fR\&, \fIcommand_auinotebook_drag_motion\fR\&, \fIcommand_auinotebook_allow_dnd\fR\&, \fIcommand_auinotebook_tab_middle_down\fR\&, \fIcommand_auinotebook_tab_middle_up\fR\&, \fIcommand_auinotebook_tab_right_down\fR\&, \fIcommand_auinotebook_tab_right_up\fR\&, \fIcommand_auinotebook_page_closed\fR\&, \fIcommand_auinotebook_drag_done\fR\&, \fIcommand_auinotebook_bg_dclick\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxAuiNotebookEvent\fR\&
.RE
.TP 2
.B
\fIwxCalendar() = #wxCalendar{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcalendar_sel_changed\fR\&, \fIcalendar_day_changed\fR\&, \fIcalendar_month_changed\fR\&, \fIcalendar_year_changed\fR\&, \fIcalendar_doubleclicked\fR\&, \fIcalendar_weekday_clicked\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxCalendarEvent\fR\&
.RE
.TP 2
.B
\fIwxChildFocus() = #wxChildFocus{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIchild_focus\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxChildFocusEvent\fR\&
.RE
.TP 2
.B
\fIwxClose() = #wxClose{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIclose_window\fR\&, \fIend_session\fR\&, \fIquery_end_session\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxCloseEvent\fR\&
.RE
.TP 2
.B
\fIwxColourPicker() = #wxColourPicker{type=wxEventType(), colour=colour() (see module wx)}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_colourpicker_changed\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxColourPickerEvent\fR\&
.RE
.TP 2
.B
\fIwxCommand() = #wxCommand{type=wxEventType(), cmdString=string(), commandInt=integer(), extraLong=integer()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_button_clicked\fR\&, \fIcommand_checkbox_clicked\fR\&, \fIcommand_choice_selected\fR\&, \fIcommand_listbox_selected\fR\&, \fIcommand_listbox_doubleclicked\fR\&, \fIcommand_text_updated\fR\&, \fIcommand_text_enter\fR\&, \fIcommand_menu_selected\fR\&, \fIcommand_slider_updated\fR\&, \fIcommand_radiobox_selected\fR\&, \fIcommand_radiobutton_selected\fR\&, \fIcommand_scrollbar_updated\fR\&, \fIcommand_vlbox_selected\fR\&, \fIcommand_combobox_selected\fR\&, \fIcommand_tool_rclicked\fR\&, \fIcommand_tool_enter\fR\&, \fIcommand_checklistbox_toggled\fR\&, \fIcommand_togglebutton_clicked\fR\&, \fIcommand_left_click\fR\&, \fIcommand_left_dclick\fR\&, \fIcommand_right_click\fR\&, \fIcommand_set_focus\fR\&, \fIcommand_kill_focus\fR\&, \fIcommand_enter\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxCommandEvent\fR\&
.RE
.TP 2
.B
\fIwxContextMenu() = #wxContextMenu{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcontext_menu\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxContextMenuEvent\fR\&
.RE
.TP 2
.B
\fIwxDate() = #wxDate{type=wxEventType(), date=datetime() (see module wx)}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIdate_changed\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxDateEvent\fR\&
.RE
.TP 2
.B
\fIwxDisplayChanged() = #wxDisplayChanged{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIdisplay_changed\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxDisplayChangedEvent\fR\&
.RE
.TP 2
.B
\fIwxErase() = #wxErase{type=wxEventType(), dc=wxDC() (see module wxDC)}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIerase_background\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxEraseEvent\fR\&
.RE
.TP 2
.B
\fIwxEventType() = aui_find_manager | aui_pane_button | aui_pane_close | aui_pane_maximize | aui_pane_restore | aui_render | calendar_day_changed | calendar_doubleclicked | calendar_month_changed | calendar_sel_changed | calendar_weekday_clicked | calendar_year_changed | char | char_hook | child_focus | close_window | command_auinotebook_allow_dnd | command_auinotebook_begin_drag | command_auinotebook_bg_dclick | command_auinotebook_button | command_auinotebook_drag_done | command_auinotebook_drag_motion | command_auinotebook_end_drag | command_auinotebook_page_changed | command_auinotebook_page_changing | command_auinotebook_page_close | command_auinotebook_page_closed | command_auinotebook_tab_middle_down | command_auinotebook_tab_middle_up | command_auinotebook_tab_right_down | command_auinotebook_tab_right_up | command_button_clicked | command_checkbox_clicked | command_checklistbox_toggled | command_choice_selected | command_colourpicker_changed | command_combobox_selected | command_dirpicker_changed | command_enter | command_filepicker_changed | command_fontpicker_changed | command_html_link_clicked | command_kill_focus | command_left_click | command_left_dclick | command_list_begin_drag | command_list_begin_label_edit | command_list_begin_rdrag | command_list_cache_hint | command_list_col_begin_drag | command_list_col_click | command_list_col_dragging | command_list_col_end_drag | command_list_col_right_click | command_list_delete_all_items | command_list_delete_item | command_list_end_label_edit | command_list_insert_item | command_list_item_activated | command_list_item_deselected | command_list_item_focused | command_list_item_middle_click | command_list_item_right_click | command_list_item_selected | command_list_key_down | command_listbox_doubleclicked | command_listbox_selected | command_menu_selected | command_notebook_page_changed | command_notebook_page_changing | command_radiobox_selected | command_radiobutton_selected | command_right_click | command_scrollbar_updated | command_set_focus | command_slider_updated | command_spinctrl_updated | command_splitter_doubleclicked | command_splitter_sash_pos_changed | command_splitter_sash_pos_changing | command_splitter_unsplit | command_text_enter | command_text_updated | command_togglebutton_clicked | command_tool_enter | command_tool_rclicked | command_tree_begin_drag | command_tree_begin_label_edit | command_tree_begin_rdrag | command_tree_delete_item | command_tree_end_drag | command_tree_end_label_edit | command_tree_get_info | command_tree_item_activated | command_tree_item_collapsed | command_tree_item_collapsing | command_tree_item_expanded | command_tree_item_expanding | command_tree_item_gettooltip | command_tree_item_menu | command_tree_item_middle_click | command_tree_item_right_click | command_tree_key_down | command_tree_sel_changed | command_tree_sel_changing | command_tree_set_info | command_tree_state_image_click | command_vlbox_selected | context_menu | create | date_changed | destroy | detailed_help | display_changed | end_session | enter_window | erase_background | grid_cell_begin_drag | grid_cell_change | grid_cell_left_click | grid_cell_left_dclick | grid_cell_right_click | grid_cell_right_dclick | grid_col_size | grid_editor_created | grid_editor_hidden | grid_editor_shown | grid_label_left_click | grid_label_left_dclick | grid_label_right_click | grid_label_right_dclick | grid_range_select | grid_row_size | grid_select_cell | help | iconize | idle | joy_button_down | joy_button_up | joy_move | joy_zmove | key_down | key_up | kill_focus | leave_window | left_dclick | left_down | left_up | maximize | menu_close | menu_highlight | menu_open | middle_dclick | middle_down | middle_up | motion | mouse_capture_changed | mousewheel | move | navigation_key | nc_enter_window | nc_leave_window | nc_left_dclick | nc_left_down | nc_left_up | nc_middle_dclick | nc_middle_down | nc_middle_up | nc_motion | nc_paint | nc_right_dclick | nc_right_down | nc_right_up | paint | paint_icon | palette_changed | query_end_session | query_new_palette | right_dclick | right_down | right_up | sash_dragged | scroll_bottom | scroll_changed | scroll_linedown | scroll_lineup | scroll_pagedown | scroll_pageup | scroll_thumbrelease | scroll_thumbtrack | scroll_top | scrollwin_bottom | scrollwin_linedown | scrollwin_lineup | scrollwin_pagedown | scrollwin_pageup | scrollwin_thumbrelease | scrollwin_thumbtrack | scrollwin_top | set_cursor | set_focus | show | size | spin | spin_down | spin_up | stc_autocomp_selection | stc_calltip_click | stc_change | stc_charadded | stc_do_drop | stc_doubleclick | stc_drag_over | stc_dwellend | stc_dwellstart | stc_hotspot_click | stc_hotspot_dclick | stc_key | stc_macrorecord | stc_marginclick | stc_modified | stc_needshown | stc_painted | stc_romodifyattempt | stc_savepointleft | stc_savepointreached | stc_start_drag | stc_styleneeded | stc_updateui | stc_uridropped | stc_userlistselection | stc_zoom | sys_colour_changed | update_ui\fR\&:

.TP 2
.B
\fIwxEvtHandler()\fR\&:

.RS 2
.LP
An object reference
.RE
.TP 2
.B
\fIwxFileDirPicker() = #wxFileDirPicker{type=wxEventType(), path=string()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_filepicker_changed\fR\&, \fIcommand_dirpicker_changed\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxFileDirPickerEvent\fR\&
.RE
.TP 2
.B
\fIwxFocus() = #wxFocus{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIset_focus\fR\&, \fIkill_focus\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxFocusEvent\fR\&
.RE
.TP 2
.B
\fIwxFontPicker() = #wxFontPicker{type=wxEventType(), font=wxFont() (see module wxFont)}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_fontpicker_changed\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxFontPickerEvent\fR\&
.RE
.TP 2
.B
\fIwxGrid() = #wxGrid{type=wxEventType(), row=integer(), col=integer(), x=integer(), y=integer(), selecting=bool(), control=bool(), meta=bool(), shift=bool(), alt=bool()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIgrid_cell_left_click\fR\&, \fIgrid_cell_right_click\fR\&, \fIgrid_cell_left_dclick\fR\&, \fIgrid_cell_right_dclick\fR\&, \fIgrid_label_left_click\fR\&, \fIgrid_label_right_click\fR\&, \fIgrid_label_left_dclick\fR\&, \fIgrid_label_right_dclick\fR\&, \fIgrid_row_size\fR\&, \fIgrid_col_size\fR\&, \fIgrid_range_select\fR\&, \fIgrid_cell_change\fR\&, \fIgrid_select_cell\fR\&, \fIgrid_editor_shown\fR\&, \fIgrid_editor_hidden\fR\&, \fIgrid_editor_created\fR\&, \fIgrid_cell_begin_drag\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxGridEvent\fR\&
.RE
.TP 2
.B
\fIwxHelp() = #wxHelp{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIhelp\fR\&, \fIdetailed_help\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxHelpEvent\fR\&
.RE
.TP 2
.B
\fIwxHtmlLink() = #wxHtmlLink{type=wxEventType(), linkInfo=wxHtmlLinkInfo() (see module wx)}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_html_link_clicked\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxHtmlLinkEvent\fR\&
.RE
.TP 2
.B
\fIwxIconize() = #wxIconize{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIiconize\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxIconizeEvent\fR\&
.RE
.TP 2
.B
\fIwxIdle() = #wxIdle{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIidle\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxIdleEvent\fR\&
.RE
.TP 2
.B
\fIwxJoystick() = #wxJoystick{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIjoy_button_down\fR\&, \fIjoy_button_up\fR\&, \fIjoy_move\fR\&, \fIjoy_zmove\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxJoystickEvent\fR\&
.RE
.TP 2
.B
\fIwxKey() = #wxKey{type=wxEventType(), x=integer(), y=integer(), keyCode=integer(), controlDown=bool(), shiftDown=bool(), altDown=bool(), metaDown=bool(), scanCode=bool(), uniChar=integer(), rawCode=integer(), rawFlags=integer()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIchar\fR\&, \fIchar_hook\fR\&, \fIkey_down\fR\&, \fIkey_up\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxKeyEvent\fR\&
.RE
.TP 2
.B
\fIwxList() = #wxList{type=wxEventType(), code=integer(), oldItemIndex=integer(), itemIndex=integer(), col=integer(), pointDrag={X::integer(), Y::integer()}}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_list_begin_drag\fR\&, \fIcommand_list_begin_rdrag\fR\&, \fIcommand_list_begin_label_edit\fR\&, \fIcommand_list_end_label_edit\fR\&, \fIcommand_list_delete_item\fR\&, \fIcommand_list_delete_all_items\fR\&, \fIcommand_list_key_down\fR\&, \fIcommand_list_insert_item\fR\&, \fIcommand_list_col_click\fR\&, \fIcommand_list_col_right_click\fR\&, \fIcommand_list_col_begin_drag\fR\&, \fIcommand_list_col_dragging\fR\&, \fIcommand_list_col_end_drag\fR\&, \fIcommand_list_item_selected\fR\&, \fIcommand_list_item_deselected\fR\&, \fIcommand_list_item_right_click\fR\&, \fIcommand_list_item_middle_click\fR\&, \fIcommand_list_item_activated\fR\&, \fIcommand_list_item_focused\fR\&, \fIcommand_list_cache_hint\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxListEvent\fR\&
.RE
.TP 2
.B
\fIwxMaximize() = #wxMaximize{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fImaximize\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxMaximizeEvent\fR\&
.RE
.TP 2
.B
\fIwxMenu() = #wxMenu{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fImenu_open\fR\&, \fImenu_close\fR\&, \fImenu_highlight\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxMenuEvent\fR\&
.RE
.TP 2
.B
\fIwxMouse() = #wxMouse{type=wxEventType(), x=integer(), y=integer(), leftDown=bool(), middleDown=bool(), rightDown=bool(), controlDown=bool(), shiftDown=bool(), altDown=bool(), metaDown=bool(), wheelRotation=integer(), wheelDelta=integer(), linesPerAction=integer()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIleft_down\fR\&, \fIleft_up\fR\&, \fImiddle_down\fR\&, \fImiddle_up\fR\&, \fIright_down\fR\&, \fIright_up\fR\&, \fImotion\fR\&, \fIenter_window\fR\&, \fIleave_window\fR\&, \fIleft_dclick\fR\&, \fImiddle_dclick\fR\&, \fIright_dclick\fR\&, \fImousewheel\fR\&, \fInc_left_down\fR\&, \fInc_left_up\fR\&, \fInc_middle_down\fR\&, \fInc_middle_up\fR\&, \fInc_right_down\fR\&, \fInc_right_up\fR\&, \fInc_motion\fR\&, \fInc_enter_window\fR\&, \fInc_leave_window\fR\&, \fInc_left_dclick\fR\&, \fInc_middle_dclick\fR\&, \fInc_right_dclick\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxMouseEvent\fR\&
.RE
.TP 2
.B
\fIwxMouseCaptureChanged() = #wxMouseCaptureChanged{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fImouse_capture_changed\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxMouseCaptureChangedEvent\fR\&
.RE
.TP 2
.B
\fIwxMove() = #wxMove{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fImove\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxMoveEvent\fR\&
.RE
.TP 2
.B
\fIwxNavigationKey() = #wxNavigationKey{type=wxEventType(), flags=integer(), focus=wxWindow() (see module wxWindow)}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fInavigation_key\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxNavigationKeyEvent\fR\&
.RE
.TP 2
.B
\fIwxNcPaint() = #wxNcPaint{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fInc_paint\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxNcPaintEvent\fR\&
.RE
.TP 2
.B
\fIwxNotebook() = #wxNotebook{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_notebook_page_changed\fR\&, \fIcommand_notebook_page_changing\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxNotebookEvent\fR\&
.RE
.TP 2
.B
\fIwxPaint() = #wxPaint{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIpaint\fR\&, \fIpaint_icon\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxPaintEvent\fR\&
.RE
.TP 2
.B
\fIwxPaletteChanged() = #wxPaletteChanged{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIpalette_changed\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxPaletteChangedEvent\fR\&
.RE
.TP 2
.B
\fIwxQueryNewPalette() = #wxQueryNewPalette{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIquery_new_palette\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxQueryNewPaletteEvent\fR\&
.RE
.TP 2
.B
\fIwxSash() = #wxSash{type=wxEventType(), edge=WxSashEdgePosition, dragRect={X::integer(), Y::integer(), W::integer(), H::integer()}, dragStatus=WxSashDragStatus}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIsash_dragged\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxSashEvent\fR\&
.RE
.TP 2
.B
\fIwxScroll() = #wxScroll{type=wxEventType(), commandInt=integer(), extraLong=integer()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIscroll_top\fR\&, \fIscroll_bottom\fR\&, \fIscroll_lineup\fR\&, \fIscroll_linedown\fR\&, \fIscroll_pageup\fR\&, \fIscroll_pagedown\fR\&, \fIscroll_thumbtrack\fR\&, \fIscroll_thumbrelease\fR\&, \fIscroll_changed\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxScrollEvent\fR\&
.RE
.TP 2
.B
\fIwxScrollWin() = #wxScrollWin{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIscrollwin_top\fR\&, \fIscrollwin_bottom\fR\&, \fIscrollwin_lineup\fR\&, \fIscrollwin_linedown\fR\&, \fIscrollwin_pageup\fR\&, \fIscrollwin_pagedown\fR\&, \fIscrollwin_thumbtrack\fR\&, \fIscrollwin_thumbrelease\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxScrollWinEvent\fR\&
.RE
.TP 2
.B
\fIwxSetCursor() = #wxSetCursor{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIset_cursor\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxSetCursorEvent\fR\&
.RE
.TP 2
.B
\fIwxShow() = #wxShow{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIshow\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxShowEvent\fR\&
.RE
.TP 2
.B
\fIwxSize() = #wxSize{type=wxEventType(), size={W::integer(), H::integer()}, rect={X::integer(), Y::integer(), W::integer(), H::integer()}}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIsize\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxSizeEvent\fR\&
.RE
.TP 2
.B
\fIwxSpin() = #wxSpin{type=wxEventType(), commandInt=integer()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_spinctrl_updated\fR\&, \fIspin_up\fR\&, \fIspin_down\fR\&, \fIspin\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxSpinEvent\fR\&
.RE
.TP 2
.B
\fIwxSplitter() = #wxSplitter{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_splitter_sash_pos_changed\fR\&, \fIcommand_splitter_sash_pos_changing\fR\&, \fIcommand_splitter_doubleclicked\fR\&, \fIcommand_splitter_unsplit\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxSplitterEvent\fR\&
.RE
.TP 2
.B
\fIwxStyledText() = #wxStyledText{type=wxEventType(), position=integer(), key=integer(), modifiers=integer(), modificationType=integer(), text=string(), length=integer(), linesAdded=integer(), line=integer(), foldLevelNow=integer(), foldLevelPrev=integer(), margin=integer(), message=integer(), wParam=integer(), lParam=integer(), listType=integer(), x=integer(), y=integer(), dragText=string(), dragAllowMove=bool(), dragResult=WxDragResult}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIstc_change\fR\&, \fIstc_styleneeded\fR\&, \fIstc_charadded\fR\&, \fIstc_savepointreached\fR\&, \fIstc_savepointleft\fR\&, \fIstc_romodifyattempt\fR\&, \fIstc_key\fR\&, \fIstc_doubleclick\fR\&, \fIstc_updateui\fR\&, \fIstc_modified\fR\&, \fIstc_macrorecord\fR\&, \fIstc_marginclick\fR\&, \fIstc_needshown\fR\&, \fIstc_painted\fR\&, \fIstc_userlistselection\fR\&, \fIstc_uridropped\fR\&, \fIstc_dwellstart\fR\&, \fIstc_dwellend\fR\&, \fIstc_start_drag\fR\&, \fIstc_drag_over\fR\&, \fIstc_do_drop\fR\&, \fIstc_zoom\fR\&, \fIstc_hotspot_click\fR\&, \fIstc_hotspot_dclick\fR\&, \fIstc_calltip_click\fR\&, \fIstc_autocomp_selection\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxStyledTextEvent\fR\&
.RE
.TP 2
.B
\fIwxSysColourChanged() = #wxSysColourChanged{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIsys_colour_changed\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxSysColourChangedEvent\fR\&
.RE
.TP 2
.B
\fIwxTree() = #wxTree{type=wxEventType(), item=integer(), itemOld=integer(), pointDrag={X::integer(), Y::integer()}}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcommand_tree_begin_drag\fR\&, \fIcommand_tree_begin_rdrag\fR\&, \fIcommand_tree_begin_label_edit\fR\&, \fIcommand_tree_end_label_edit\fR\&, \fIcommand_tree_delete_item\fR\&, \fIcommand_tree_get_info\fR\&, \fIcommand_tree_set_info\fR\&, \fIcommand_tree_item_expanded\fR\&, \fIcommand_tree_item_expanding\fR\&, \fIcommand_tree_item_collapsed\fR\&, \fIcommand_tree_item_collapsing\fR\&, \fIcommand_tree_sel_changed\fR\&, \fIcommand_tree_sel_changing\fR\&, \fIcommand_tree_key_down\fR\&, \fIcommand_tree_item_activated\fR\&, \fIcommand_tree_item_right_click\fR\&, \fIcommand_tree_item_middle_click\fR\&, \fIcommand_tree_end_drag\fR\&, \fIcommand_tree_state_image_click\fR\&, \fIcommand_tree_item_gettooltip\fR\&, \fIcommand_tree_item_menu\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxTreeEvent\fR\&
.RE
.TP 2
.B
\fIwxUpdateUI() = #wxUpdateUI{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIupdate_ui\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxUpdateUIEvent\fR\&
.RE
.TP 2
.B
\fIwxWindowCreate() = #wxWindowCreate{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIcreate\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxWindowCreateEvent\fR\&
.RE
.TP 2
.B
\fIwxWindowDestroy() = #wxWindowDestroy{type=wxEventType()}\fR\&:

.RS 2
.TP 2
.B
EventType::
\fIdestroy\fR\&
.RE
.RS 2
.LP
Callback event: \fBwxWindowDestroyEvent\fR\&
.RE
.RE
.SH EXPORTS
.LP
.B
connect(This::wxEvtHandler(), EventType::wxEventType()) -> ok
.br
.RS
.LP
Equivalent to \fBconnect(This, EventType, [])\fR\&
.RE
.LP
.B
connect(This::wxEvtHandler(), EventType::wxEventType(), Options::[Options]) -> ok
.br
.RS
.LP
This function subscribes the to events of EventType, in the range id, lastId\&. The events will be received as messages if no callback is supplied\&.
.LP
Options: {id, integer()}, The identifier (or first of the identifier range) to be associated with this event handler\&. Default ?wxID_ANY {lastId, integer()}, The second part of the identifier range\&. If used \&'id\&' must be set as the starting identifier range\&. Default ?wxID_ANY {skip, boolean()}, If skip is true further event_handlers will be called\&. This is not used if the \&'callback\&' option is used\&. Default false\&. {callback, function()} Use a callback fun(EventRecord::wx(), EventObject::wxObject()) to process the event\&. Default not specfied i\&.e\&. a message will be delivered to the process calling this function\&. {userData, term()} An erlang term that will be sent with the event\&. Default: []\&.
.RE
.LP
.B
disconnect(This::wxEvtHandler()) -> true | false
.br
.RS
.LP
Equivalent to \fBdisconnect(This, null, [])\fR\& Can also have an optional callback Fun() as an additional last argument\&.
.RE
.LP
.B
disconnect(This::wxEvtHandler(), EventType::wxEventType()) -> true | false
.br
.RS
.LP
Equivalent to \fBdisconnect(This, EventType, [])\fR\&
.RE
.LP
.B
disconnect(This::wxEvtHandler(), EventType::wxEventType(), Opts) -> true | false
.br
.RS
.LP
See external documentation This function unsubscribes the process or callback fun from the event handler\&. EventType may be the atom \&'null\&' to match any eventtype\&. Notice that the options skip and userdata is not used to match the eventhandler\&.
.RE
.SH AUTHORS
.LP

.I
<>