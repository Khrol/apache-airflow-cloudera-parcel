.TH wxListCtrl 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxListCtrl \- See external documentation: wxListCtrl.
.SH DESCRIPTION
.LP
See external documentation: wxListCtrl\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxControl\fR\& 
.br
\fBwxWindow\fR\& 
.br
\fBwxEvtHandler\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxListCtrl()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
new() -> wxListCtrl()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow)) -> wxListCtrl()
.br
.RS
.LP
Equivalent to \fBnew(Parent, [])\fR\&\&.
.RE
.LP
.B
new(Parent::wxWindow() (see module wxWindow), Options::[Option]) -> wxListCtrl()
.br
.RS
.TP 3
Types:

Option = {winid, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx() (see module wx)} | {onGetItemText, OnGetItemText} | {onGetItemAttr, OnGetItemAttr} | {onGetItemColumnImage, OnGetItemColumnImage}
.br
OnGetItemText = (This, Item, Column) -> wxString()
.br
OnGetItemAttr = (This, Item) -> wxListItemAttr()
.br
OnGetItemColumnImage = (This, Item, Column) -> integer()
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
arrange(This::wxListCtrl()) -> bool()
.br
.RS
.LP
Equivalent to \fBarrange(This, [])\fR\&\&.
.RE
.LP
.B
arrange(This::wxListCtrl(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {flag, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
assignImageList(This::wxListCtrl(), ImageList::wxImageList() (see module wxImageList), Which::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clearAll(This::wxListCtrl()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(This::wxListCtrl(), Parent::wxWindow() (see module wxWindow)) -> bool()
.br
.RS
.LP
Equivalent to \fBcreate(This, Parent, [])\fR\&\&.
.RE
.LP
.B
create(This::wxListCtrl(), Parent::wxWindow() (see module wxWindow), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {winid, integer()} | {pos, {X::integer(), Y::integer()}} | {size, {W::integer(), H::integer()}} | {style, integer()} | {validator, wx() (see module wx)} | {onGetItemText, OnGetItemText} | {onGetItemAttr, OnGetItemAttr} | {onGetItemColumnImage, OnGetItemColumnImage}
.br
OnGetItemText = (This, Item, Column) -> wxString()
.br
OnGetItemAttr = (This, Item) -> wxListItemAttr()
.br
OnGetItemColumnImage = (This, Item, Column) -> integer()
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteAllItems(This::wxListCtrl()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteColumn(This::wxListCtrl(), Col::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
deleteItem(This::wxListCtrl(), Item::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
editLabel(This::wxListCtrl(), Item::integer()) -> wxTextCtrl() (see module wxTextCtrl)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
ensureVisible(This::wxListCtrl(), Item::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
findItem(This::wxListCtrl(), Start::integer(), Str::string()) -> integer()
.br
.RS
.LP
Equivalent to \fBfindItem(This, Start, Str, [])\fR\&\&.
.RE
.LP
.B
findItem(This::wxListCtrl(), Start::integer(), X::string() | term(), X::term() | integer()) -> integer()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI findItem(This::wxListCtrl(), Start::integer(), Str::string(), [Option]) -> integer() \fR\& 
.br
Option = {partial, bool()}
.LP
\fI findItem(This::wxListCtrl(), Start::integer(), Pt::{X::integer(),Y::integer()}, Direction::integer()) -> integer() \fR\& 
.RE
.LP
.B
getColumn(This::wxListCtrl(), Col::integer(), Item::wxListItem() (see module wxListItem)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getColumnCount(This::wxListCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getColumnWidth(This::wxListCtrl(), Col::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getCountPerPage(This::wxListCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getEditControl(This::wxListCtrl()) -> wxTextCtrl() (see module wxTextCtrl)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getImageList(This::wxListCtrl(), Which::integer()) -> wxImageList() (see module wxImageList)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItem(This::wxListCtrl(), Info::wxListItem() (see module wxListItem)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemBackgroundColour(This::wxListCtrl(), Item::integer()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemCount(This::wxListCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemData(This::wxListCtrl(), Item::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemFont(This::wxListCtrl(), Item::integer()) -> wxFont() (see module wxFont)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemPosition(This::wxListCtrl(), Item::integer(), Pos::{X::integer(), Y::integer()}) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemRect(This::wxListCtrl(), Item::integer(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}) -> bool()
.br
.RS
.LP
Equivalent to \fBgetItemRect(This, Item, Rect, [])\fR\&\&.
.RE
.LP
.B
getItemRect(This::wxListCtrl(), Item::integer(), Rect::{X::integer(), Y::integer(), W::integer(), H::integer()}, Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {code, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemSpacing(This::wxListCtrl()) -> {W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemState(This::wxListCtrl(), Item::integer(), StateMask::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemText(This::wxListCtrl(), Item::integer()) -> string()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getItemTextColour(This::wxListCtrl(), Item::integer()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getNextItem(This::wxListCtrl(), Item::integer()) -> integer()
.br
.RS
.LP
Equivalent to \fBgetNextItem(This, Item, [])\fR\&\&.
.RE
.LP
.B
getNextItem(This::wxListCtrl(), Item::integer(), Options::[Option]) -> integer()
.br
.RS
.TP 3
Types:

Option = {geometry, integer()} | {state, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getSelectedItemCount(This::wxListCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTextColour(This::wxListCtrl()) -> colour() (see module wx)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTopItem(This::wxListCtrl()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getViewRect(This::wxListCtrl()) -> {X::integer(), Y::integer(), W::integer(), H::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
hitTest(This::wxListCtrl(), Point::{X::integer(), Y::integer()}) -> {integer(), Flags::integer()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertColumn(This::wxListCtrl(), Col::integer(), X::string() | term()) -> integer()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI insertColumn(This::wxListCtrl(), Col::integer(), Heading::string()) -> insertColumn(This,Col,Heading, []) \fR\&
.LP
\fI insertColumn(This::wxListCtrl(), Col::integer(), Info::wxListItem:wxListItem()) -> integer() \fR\& 
.RE
.LP
.B
insertColumn(This::wxListCtrl(), Col::integer(), Heading::string(), Options::[Option]) -> integer()
.br
.RS
.TP 3
Types:

Option = {format, integer()} | {width, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertItem(This::wxListCtrl(), Info::wxListItem() (see module wxListItem)) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
insertItem(This::wxListCtrl(), Index::integer(), X::integer() | string()) -> integer()
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI insertItem(This::wxListCtrl(), Index::integer(), ImageIndex::integer()) -> integer() \fR\& 
.LP
\fI insertItem(This::wxListCtrl(), Index::integer(), Label::string()) -> integer() \fR\& 
.RE
.LP
.B
insertItem(This::wxListCtrl(), Index::integer(), Label::string(), ImageIndex::integer()) -> integer()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
refreshItem(This::wxListCtrl(), Item::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
refreshItems(This::wxListCtrl(), ItemFrom::integer(), ItemTo::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scrollList(This::wxListCtrl(), Dx::integer(), Dy::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setBackgroundColour(This::wxListCtrl(), Colour::colour() (see module wx)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColumn(This::wxListCtrl(), Col::integer(), Item::wxListItem() (see module wxListItem)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setColumnWidth(This::wxListCtrl(), Col::integer(), Width::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setImageList(This::wxListCtrl(), ImageList::wxImageList() (see module wxImageList), Which::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItem(This::wxListCtrl(), Info::wxListItem() (see module wxListItem)) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItem(This::wxListCtrl(), Index::integer(), Col::integer(), Label::string()) -> integer()
.br
.RS
.LP
Equivalent to \fBsetItem(This, Index, Col, Label, [])\fR\&\&.
.RE
.LP
.B
setItem(This::wxListCtrl(), Index::integer(), Col::integer(), Label::string(), Options::[Option]) -> integer()
.br
.RS
.TP 3
Types:

Option = {imageId, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemBackgroundColour(This::wxListCtrl(), Item::integer(), Col::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemCount(This::wxListCtrl(), Count::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemData(This::wxListCtrl(), Item::integer(), Data::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemFont(This::wxListCtrl(), Item::integer(), F::wxFont() (see module wxFont)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemImage(This::wxListCtrl(), Item::integer(), Image::integer()) -> bool()
.br
.RS
.LP
Equivalent to \fBsetItemImage(This, Item, Image, [])\fR\&\&.
.RE
.LP
.B
setItemImage(This::wxListCtrl(), Item::integer(), Image::integer(), Options::[Option]) -> bool()
.br
.RS
.TP 3
Types:

Option = {selImage, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemColumnImage(This::wxListCtrl(), Item::integer(), Column::integer(), Image::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemPosition(This::wxListCtrl(), Item::integer(), Pos::{X::integer(), Y::integer()}) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemState(This::wxListCtrl(), Item::integer(), State::integer(), StateMask::integer()) -> bool()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemText(This::wxListCtrl(), Item::integer(), Str::string()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setItemTextColour(This::wxListCtrl(), Item::integer(), Col::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setSingleStyle(This::wxListCtrl(), Style::integer()) -> ok
.br
.RS
.LP
Equivalent to \fBsetSingleStyle(This, Style, [])\fR\&\&.
.RE
.LP
.B
setSingleStyle(This::wxListCtrl(), Style::integer(), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {add, bool()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTextColour(This::wxListCtrl(), Col::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setWindowStyleFlag(This::wxListCtrl(), Style::integer()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
sortItems(This::wxListCtrl(), SortCallBack::function()) -> boolean()
.br
.RS
.LP
Sort the items in the list control
.br

.LP
.nf
SortCallBack(Item1,Item2) -> integer()
.fi
.LP

.br
SortCallBack receives the client data associated with two items to compare, and should return 0 if the items are equal, a negative value if the first item is less than the second one and a positive value if the first item is greater than the second one\&. 
.br
NOTE: The callback may not call other (wx) processes\&.
.RE
.LP
.B
destroy(This::wxListCtrl()) -> ok
.br
.RS
.LP
Destroys this object, do not use object again
.RE
.SH AUTHORS
.LP

.I
<>