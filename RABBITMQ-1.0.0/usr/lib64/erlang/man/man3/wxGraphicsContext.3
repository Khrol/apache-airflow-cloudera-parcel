.TH wxGraphicsContext 3 "wxErlang 0.99" "" "Erlang Module Definition"
.SH NAME
wxGraphicsContext \- See external documentation: wxGraphicsContext.
.SH DESCRIPTION
.LP
See external documentation: wxGraphicsContext\&.
.LP
This class is derived (and can use functions) from: 
.br
\fBwxGraphicsObject\fR\& 
.SH "DATA TYPES"

.RS 2
.TP 2
.B
\fIwxGraphicsContext()\fR\&:

.RS 2
.LP
An object reference, The representation is internal and can be changed without notice\&. It can\&'t be used for comparsion stored on disc or distributed for use on other nodes\&.
.RE
.RE
.SH EXPORTS
.LP
.B
create() -> wxGraphicsContext()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
create(Dc::wxWindowDC() (see module wxWindowDC) | wxWindow() (see module wxWindow)) -> wxGraphicsContext()
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
createPen(This::wxGraphicsContext(), Pen::wxPen() (see module wxPen)) -> wxGraphicsPen() (see module wxGraphicsPen)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
createBrush(This::wxGraphicsContext(), Brush::wxBrush() (see module wxBrush)) -> wxGraphicsBrush() (see module wxGraphicsBrush)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
createRadialGradientBrush(This::wxGraphicsContext(), Xo::float(), Yo::float(), Xc::float(), Yc::float(), Radius::float(), OColor::colour() (see module wx), CColor::colour() (see module wx)) -> wxGraphicsBrush() (see module wxGraphicsBrush)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
createLinearGradientBrush(This::wxGraphicsContext(), X1::float(), Y1::float(), X2::float(), Y2::float(), C1::colour() (see module wx), C2::colour() (see module wx)) -> wxGraphicsBrush() (see module wxGraphicsBrush)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
createFont(This::wxGraphicsContext(), Font::wxFont() (see module wxFont)) -> wxGraphicsFont() (see module wxGraphicsFont)
.br
.RS
.LP
Equivalent to \fBcreateFont(This, Font, [])\fR\&\&.
.RE
.LP
.B
createFont(This::wxGraphicsContext(), Font::wxFont() (see module wxFont), Options::[Option]) -> wxGraphicsFont() (see module wxGraphicsFont)
.br
.RS
.TP 3
Types:

Option = {col, colour() (see module wx)}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
createMatrix(This::wxGraphicsContext()) -> wxGraphicsMatrix() (see module wxGraphicsMatrix)
.br
.RS
.LP
Equivalent to \fBcreateMatrix(This, [])\fR\&\&.
.RE
.LP
.B
createMatrix(This::wxGraphicsContext(), Options::[Option]) -> wxGraphicsMatrix() (see module wxGraphicsMatrix)
.br
.RS
.TP 3
Types:

Option = {a, float()} | {b, float()} | {c, float()} | {d, float()} | {tx, float()} | {ty, float()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
createPath(This::wxGraphicsContext()) -> wxGraphicsPath() (see module wxGraphicsPath)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clip(This::wxGraphicsContext(), Region::wxRegion() (see module wxRegion)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
clip(This::wxGraphicsContext(), X::float(), Y::float(), W::float(), H::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
resetClip(This::wxGraphicsContext()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
drawBitmap(This::wxGraphicsContext(), Bmp::wxBitmap() (see module wxBitmap), X::float(), Y::float(), W::float(), H::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
drawEllipse(This::wxGraphicsContext(), X::float(), Y::float(), W::float(), H::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
drawIcon(This::wxGraphicsContext(), Icon::wxIcon() (see module wxIcon), X::float(), Y::float(), W::float(), H::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
drawLines(This::wxGraphicsContext(), N::integer(), Points::{X::float(), Y::float()}) -> ok
.br
.RS
.LP
Equivalent to \fBdrawLines(This, N, Points, [])\fR\&\&.
.RE
.LP
.B
drawLines(This::wxGraphicsContext(), N::integer(), Points::{X::float(), Y::float()}, Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {fillStyle, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
drawPath(This::wxGraphicsContext(), Path::wxGraphicsPath() (see module wxGraphicsPath)) -> ok
.br
.RS
.LP
Equivalent to \fBdrawPath(This, Path, [])\fR\&\&.
.RE
.LP
.B
drawPath(This::wxGraphicsContext(), Path::wxGraphicsPath() (see module wxGraphicsPath), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {fillStyle, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
drawRectangle(This::wxGraphicsContext(), X::float(), Y::float(), W::float(), H::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
drawRoundedRectangle(This::wxGraphicsContext(), X::float(), Y::float(), W::float(), H::float(), Radius::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
drawText(This::wxGraphicsContext(), Str::string(), X::float(), Y::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
drawText(This::wxGraphicsContext(), Str::string(), X::float(), Y::float(), X::float() | term()) -> ok
.br
.RS
.LP
See external documentation\&. 
.br
Alternatives:
.LP
\fI drawText(This::wxGraphicsContext(), Str::string(), X::float(), Y::float(), Angle::float()) -> ok \fR\& 
.LP
\fI drawText(This::wxGraphicsContext(), Str::string(), X::float(), Y::float(), BackgroundBrush::wxGraphicsBrush:wxGraphicsBrush()) -> ok \fR\& 
.RE
.LP
.B
drawText(This::wxGraphicsContext(), Str::string(), X::float(), Y::float(), Angle::float(), BackgroundBrush::wxGraphicsBrush() (see module wxGraphicsBrush)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
fillPath(This::wxGraphicsContext(), Path::wxGraphicsPath() (see module wxGraphicsPath)) -> ok
.br
.RS
.LP
Equivalent to \fBfillPath(This, Path, [])\fR\&\&.
.RE
.LP
.B
fillPath(This::wxGraphicsContext(), Path::wxGraphicsPath() (see module wxGraphicsPath), Options::[Option]) -> ok
.br
.RS
.TP 3
Types:

Option = {fillStyle, integer()}
.br
.RE
.RS
.LP
See external documentation\&.
.RE
.LP
.B
strokePath(This::wxGraphicsContext(), Path::wxGraphicsPath() (see module wxGraphicsPath)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getNativeContext(This::wxGraphicsContext()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getPartialTextExtents(This::wxGraphicsContext(), Text::string(), Widths::[float()]) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTextExtent(This::wxGraphicsContext(), Text::string()) -> {Width::float(), Height::float(), Descent::float(), ExternalLeading::float()}
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
rotate(This::wxGraphicsContext(), Angle::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
scale(This::wxGraphicsContext(), XScale::float(), YScale::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
translate(This::wxGraphicsContext(), Dx::float(), Dy::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
getTransform(This::wxGraphicsContext()) -> wxGraphicsMatrix() (see module wxGraphicsMatrix)
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setTransform(This::wxGraphicsContext(), Matrix::wxGraphicsMatrix() (see module wxGraphicsMatrix)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
concatTransform(This::wxGraphicsContext(), Matrix::wxGraphicsMatrix() (see module wxGraphicsMatrix)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setBrush(This::wxGraphicsContext(), Brush::wxGraphicsBrush() (see module wxGraphicsBrush) | wxBrush() (see module wxBrush)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFont(This::wxGraphicsContext(), Font::wxGraphicsFont() (see module wxGraphicsFont)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setFont(This::wxGraphicsContext(), Font::wxFont() (see module wxFont), Colour::colour() (see module wx)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
setPen(This::wxGraphicsContext(), Pen::wxPen() (see module wxPen) | wxGraphicsPen() (see module wxGraphicsPen)) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
strokeLine(This::wxGraphicsContext(), X1::float(), Y1::float(), X2::float(), Y2::float()) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
strokeLines(This::wxGraphicsContext(), N::integer(), Points::{X::float(), Y::float()}) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.LP
.B
strokeLines(This::wxGraphicsContext(), N::integer(), BeginPoints::{X::float(), Y::float()}, EndPoints::{X::float(), Y::float()}) -> ok
.br
.RS
.LP
See external documentation\&.
.RE
.SH AUTHORS
.LP

.I
<>